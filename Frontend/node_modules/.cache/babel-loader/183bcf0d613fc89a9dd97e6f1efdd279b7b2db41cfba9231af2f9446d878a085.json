{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\nimport warning from 'warning';\nimport { convertDataToTree as vcConvertDataToTree, convertTreeToEntities as vcConvertTreeToEntities, conductCheck as rcConductCheck } from '../../vc-tree/src/util';\nimport { hasClass } from '../../vc-util/Dom/class';\nimport { SHOW_CHILD, SHOW_PARENT } from './strategies';\nimport { getSlot, getPropsData, isEmptyElement } from '../../_util/props-util';\nvar warnDeprecatedLabel = false; // =================== DOM =====================\n\nexport function findPopupContainer(node, prefixClass) {\n  var current = node;\n  while (current) {\n    if (hasClass(current, prefixClass)) {\n      return current;\n    }\n    current = current.parentNode;\n  }\n  return null;\n} // =================== MISC ====================\n\nexport function toTitle(title) {\n  if (typeof title === 'string') {\n    return title;\n  }\n  return null;\n}\nexport function toArray(data) {\n  if (data === undefined || data === null) return [];\n  return Array.isArray(data) ? data : [data];\n}\nexport function createRef() {\n  var func = function setRef(node) {\n    func.current = node;\n  };\n  return func;\n} // =============== Legacy ===============\n\nexport var UNSELECTABLE_STYLE = {\n  userSelect: 'none',\n  WebkitUserSelect: 'none'\n};\nexport var UNSELECTABLE_ATTRIBUTE = {\n  unselectable: 'unselectable'\n};\n/**\n * Convert position list to hierarchy structure.\n * This is little hack since use '-' to split the position.\n */\n\nexport function flatToHierarchy(positionList) {\n  if (!positionList.length) {\n    return [];\n  }\n  var entrances = {}; // Prepare the position map\n\n  var posMap = {};\n  var parsedList = positionList.slice().map(function (entity) {\n    var clone = _extends(_extends({}, entity), {\n      fields: entity.pos.split('-')\n    });\n    delete clone.children;\n    return clone;\n  });\n  parsedList.forEach(function (entity) {\n    posMap[entity.pos] = entity;\n  });\n  parsedList.sort(function (a, b) {\n    return a.fields.length - b.fields.length;\n  }); // Create the hierarchy\n\n  parsedList.forEach(function (entity) {\n    var parentPos = entity.fields.slice(0, -1).join('-');\n    var parentEntity = posMap[parentPos];\n    if (!parentEntity) {\n      entrances[entity.pos] = entity;\n    } else {\n      parentEntity.children = parentEntity.children || [];\n      parentEntity.children.push(entity);\n    } // Some time position list provide `key`, we don't need it\n\n    delete entity.key;\n    delete entity.fields;\n  });\n  return Object.keys(entrances).map(function (key) {\n    return entrances[key];\n  });\n} // =============== Accessibility ===============\n\nvar ariaId = 0;\nexport function resetAriaId() {\n  ariaId = 0;\n}\nexport function generateAriaId(prefix) {\n  ariaId += 1;\n  return \"\".concat(prefix, \"_\").concat(ariaId);\n}\nexport function isLabelInValue(props) {\n  var treeCheckable = props.treeCheckable,\n    treeCheckStrictly = props.treeCheckStrictly,\n    labelInValue = props.labelInValue;\n  if (treeCheckable && treeCheckStrictly) {\n    return true;\n  }\n  return labelInValue || false;\n} // =================== Tree ====================\n\nexport function parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n    pId = _ref.pId,\n    rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _extends({}, node);\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Detect if position has relation.\n * e.g. 1-2 related with 1-2-3\n * e.g. 1-3-2 related with 1\n * e.g. 1-2 not related with 1-21\n */\n\nexport function isPosRelated(pos1, pos2) {\n  var fields1 = pos1.split('-');\n  var fields2 = pos2.split('-');\n  var minLen = Math.min(fields1.length, fields2.length);\n  for (var i = 0; i < minLen; i += 1) {\n    if (fields1[i] !== fields2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * This function is only used on treeNode check (none treeCheckStrictly but has searchInput).\n * We convert entity to { node, pos, children } format.\n * This is legacy bug but we still need to do with it.\n * @param entity\n */\n\nexport function cleanEntity(_ref2) {\n  var node = _ref2.node,\n    pos = _ref2.pos,\n    children = _ref2.children;\n  var instance = {\n    node: node,\n    pos: pos\n  };\n  if (children) {\n    instance.children = children.map(cleanEntity);\n  }\n  return instance;\n}\n/**\n * Get a filtered TreeNode list by provided treeNodes.\n * [Legacy] Since `Tree` use `key` as map but `key` will changed by React,\n * we have to convert `treeNodes > data > treeNodes` to keep the key.\n * Such performance hungry!\n */\n\nexport function getFilterTree(treeNodes, searchValue, filterFunc, valueEntities, Component) {\n  if (!searchValue) {\n    return null;\n  }\n  function mapFilteredNodeToData(node) {\n    if (!node || isEmptyElement(node)) return null;\n    var match = false;\n    if (filterFunc(searchValue, node)) {\n      match = true;\n    }\n    var children = getSlot(node);\n    children = ((typeof children === 'function' ? children() : children) || []).map(mapFilteredNodeToData).filter(function (n) {\n      return n;\n    });\n    if (children.length || match) {\n      return _createVNode(Component, _objectSpread(_objectSpread({}, node.props), {}, {\n        \"key\": valueEntities[getPropsData(node).value].key\n      }), {\n        default: function _default() {\n          return [children];\n        }\n      });\n    }\n    return null;\n  }\n  return treeNodes.map(mapFilteredNodeToData).filter(function (node) {\n    return node;\n  });\n} // =================== Value ===================\n\n/**\n * Convert value to array format to make logic simplify.\n */\n\nexport function formatInternalValue(value, props) {\n  var valueList = toArray(value); // Parse label in value\n\n  if (isLabelInValue(props)) {\n    return valueList.map(function (val) {\n      if (_typeof(val) !== 'object' || !val) {\n        return {\n          value: '',\n          label: ''\n        };\n      }\n      return val;\n    });\n  }\n  return valueList.map(function (val) {\n    return {\n      value: val\n    };\n  });\n}\nexport function getLabel(wrappedValue, entity, treeNodeLabelProp) {\n  if (wrappedValue.label) {\n    return wrappedValue.label;\n  }\n  if (entity) {\n    var props = getPropsData(entity.node);\n    if (Object.keys(props).length) {\n      return props[treeNodeLabelProp];\n    }\n  } // Since value without entity will be in missValueList.\n  // This code will never reached, but we still need this in case.\n\n  return wrappedValue.value;\n}\n/**\n * Convert internal state `valueList` to user needed value list.\n * This will return an array list. You need check if is not multiple when return.\n *\n * `allCheckedNodes` is used for `treeCheckStrictly`\n */\n\nexport function formatSelectorValue(valueList, props, valueEntities) {\n  var treeNodeLabelProp = props.treeNodeLabelProp,\n    treeCheckable = props.treeCheckable,\n    treeCheckStrictly = props.treeCheckStrictly,\n    showCheckedStrategy = props.showCheckedStrategy; // Will hide some value if `showCheckedStrategy` is set\n\n  if (treeCheckable && !treeCheckStrictly) {\n    var values = {};\n    valueList.forEach(function (wrappedValue) {\n      values[wrappedValue.value] = wrappedValue;\n    });\n    var hierarchyList = flatToHierarchy(valueList.map(function (_ref3) {\n      var value = _ref3.value;\n      return valueEntities[value];\n    }));\n    if (showCheckedStrategy === SHOW_PARENT) {\n      // Only get the parent checked value\n      return hierarchyList.map(function (_ref4) {\n        var node = _ref4.node;\n        var value = getPropsData(node).value;\n        return {\n          label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n          value: value\n        };\n      });\n    }\n    if (showCheckedStrategy === SHOW_CHILD) {\n      // Only get the children checked value\n      var targetValueList = []; // Find the leaf children\n\n      var traverse = function traverse(_ref5) {\n        var node = _ref5.node,\n          children = _ref5.children;\n        var value = getPropsData(node).value;\n        if (!children || children.length === 0) {\n          targetValueList.push({\n            label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n            value: value\n          });\n          return;\n        }\n        children.forEach(function (entity) {\n          traverse(entity);\n        });\n      };\n      hierarchyList.forEach(function (entity) {\n        traverse(entity);\n      });\n      return targetValueList;\n    }\n  }\n  return valueList.map(function (wrappedValue) {\n    return {\n      label: getLabel(wrappedValue, valueEntities[wrappedValue.value], treeNodeLabelProp),\n      value: wrappedValue.value\n    };\n  });\n}\n/**\n * Use `rc-tree` convertDataToTree to convert treeData to TreeNodes.\n * This will change the label to title value\n */\n\nfunction processProps(props) {\n  var title = props.title,\n    label = props.label,\n    key = props.key,\n    value = props.value;\n  var cloneProps = _extends({}, props); // Warning user not to use deprecated label prop.\n\n  if (label && !title) {\n    if (!warnDeprecatedLabel) {\n      warning(false, \"'label' in treeData is deprecated. Please use 'title' instead.\");\n      warnDeprecatedLabel = true;\n    }\n    cloneProps.title = label;\n  }\n  if (!key && (key === undefined || key === null)) {\n    cloneProps.key = value;\n  }\n  return cloneProps;\n}\nexport function convertDataToTree(treeData) {\n  return vcConvertDataToTree(treeData, {\n    processProps: processProps\n  });\n}\n/**\n * Use `rc-tree` convertTreeToEntities for entities calculation.\n * We have additional entities of `valueEntities`\n */\n\nfunction initWrapper(wrapper) {\n  return _extends(_extends({}, wrapper), {\n    valueEntities: {}\n  });\n}\nfunction processEntity(entity, wrapper) {\n  var value = getPropsData(entity.node).value;\n  entity.value = value; // This should be empty, or will get error message.\n\n  var currentEntity = wrapper.valueEntities[value];\n  if (currentEntity) {\n    warning(false, \"Conflict! value of node '\".concat(entity.key, \"' (\").concat(value, \") has already used by node '\").concat(currentEntity.key, \"'.\"));\n  }\n  wrapper.valueEntities[value] = entity;\n}\nexport function convertTreeToEntities(treeNodes) {\n  return vcConvertTreeToEntities(treeNodes, {\n    initWrapper: initWrapper,\n    processEntity: processEntity\n  });\n}\n/**\n * https://github.com/ant-design/ant-design/issues/13328\n * We need calculate the half check key when searchValue is set.\n */\n// TODO: This logic may better move to rc-tree\n\nexport function getHalfCheckedKeys(valueList, valueEntities) {\n  var values = {}; // Fill checked keys\n\n  valueList.forEach(function (_ref6) {\n    var value = _ref6.value;\n    values[value] = false;\n  }); // Fill half checked keys\n\n  valueList.forEach(function (_ref7) {\n    var value = _ref7.value;\n    var current = valueEntities[value];\n    while (current && current.parent) {\n      var parentValue = current.parent.value;\n      if (parentValue in values) break;\n      values[parentValue] = true;\n      current = current.parent;\n    }\n  }); // Get half keys\n\n  return Object.keys(values).filter(function (value) {\n    return values[value];\n  }).map(function (value) {\n    return valueEntities[value].key;\n  });\n}\nexport var conductCheck = rcConductCheck;","map":{"version":3,"names":["_typeof","_objectSpread","_extends","createVNode","_createVNode","warning","convertDataToTree","vcConvertDataToTree","convertTreeToEntities","vcConvertTreeToEntities","conductCheck","rcConductCheck","hasClass","SHOW_CHILD","SHOW_PARENT","getSlot","getPropsData","isEmptyElement","warnDeprecatedLabel","findPopupContainer","node","prefixClass","current","parentNode","toTitle","title","toArray","data","undefined","Array","isArray","createRef","func","setRef","UNSELECTABLE_STYLE","userSelect","WebkitUserSelect","UNSELECTABLE_ATTRIBUTE","unselectable","flatToHierarchy","positionList","length","entrances","posMap","parsedList","slice","map","entity","clone","fields","pos","split","children","forEach","sort","a","b","parentPos","join","parentEntity","push","key","Object","keys","ariaId","resetAriaId","generateAriaId","prefix","concat","isLabelInValue","props","treeCheckable","treeCheckStrictly","labelInValue","parseSimpleTreeData","treeData","_ref","id","pId","rootPId","keyNodes","rootNodeList","nodeList","parentKey","parent","isPosRelated","pos1","pos2","fields1","fields2","minLen","Math","min","i","cleanEntity","_ref2","instance","getFilterTree","treeNodes","searchValue","filterFunc","valueEntities","Component","mapFilteredNodeToData","match","filter","n","value","default","_default","formatInternalValue","valueList","val","label","getLabel","wrappedValue","treeNodeLabelProp","formatSelectorValue","showCheckedStrategy","values","hierarchyList","_ref3","_ref4","targetValueList","traverse","_ref5","processProps","cloneProps","initWrapper","wrapper","processEntity","currentEntity","getHalfCheckedKeys","_ref6","_ref7","parentValue"],"sources":["/Users/lyonxie/Desktop/Frontend/node_modules/ant-design-vue/es/vc-tree-select/src/util.js"],"sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\nimport warning from 'warning';\nimport { convertDataToTree as vcConvertDataToTree, convertTreeToEntities as vcConvertTreeToEntities, conductCheck as rcConductCheck } from '../../vc-tree/src/util';\nimport { hasClass } from '../../vc-util/Dom/class';\nimport { SHOW_CHILD, SHOW_PARENT } from './strategies';\nimport { getSlot, getPropsData, isEmptyElement } from '../../_util/props-util';\nvar warnDeprecatedLabel = false; // =================== DOM =====================\n\nexport function findPopupContainer(node, prefixClass) {\n  var current = node;\n\n  while (current) {\n    if (hasClass(current, prefixClass)) {\n      return current;\n    }\n\n    current = current.parentNode;\n  }\n\n  return null;\n} // =================== MISC ====================\n\nexport function toTitle(title) {\n  if (typeof title === 'string') {\n    return title;\n  }\n\n  return null;\n}\nexport function toArray(data) {\n  if (data === undefined || data === null) return [];\n  return Array.isArray(data) ? data : [data];\n}\nexport function createRef() {\n  var func = function setRef(node) {\n    func.current = node;\n  };\n\n  return func;\n} // =============== Legacy ===============\n\nexport var UNSELECTABLE_STYLE = {\n  userSelect: 'none',\n  WebkitUserSelect: 'none'\n};\nexport var UNSELECTABLE_ATTRIBUTE = {\n  unselectable: 'unselectable'\n};\n/**\n * Convert position list to hierarchy structure.\n * This is little hack since use '-' to split the position.\n */\n\nexport function flatToHierarchy(positionList) {\n  if (!positionList.length) {\n    return [];\n  }\n\n  var entrances = {}; // Prepare the position map\n\n  var posMap = {};\n  var parsedList = positionList.slice().map(function (entity) {\n    var clone = _extends(_extends({}, entity), {\n      fields: entity.pos.split('-')\n    });\n\n    delete clone.children;\n    return clone;\n  });\n  parsedList.forEach(function (entity) {\n    posMap[entity.pos] = entity;\n  });\n  parsedList.sort(function (a, b) {\n    return a.fields.length - b.fields.length;\n  }); // Create the hierarchy\n\n  parsedList.forEach(function (entity) {\n    var parentPos = entity.fields.slice(0, -1).join('-');\n    var parentEntity = posMap[parentPos];\n\n    if (!parentEntity) {\n      entrances[entity.pos] = entity;\n    } else {\n      parentEntity.children = parentEntity.children || [];\n      parentEntity.children.push(entity);\n    } // Some time position list provide `key`, we don't need it\n\n\n    delete entity.key;\n    delete entity.fields;\n  });\n  return Object.keys(entrances).map(function (key) {\n    return entrances[key];\n  });\n} // =============== Accessibility ===============\n\nvar ariaId = 0;\nexport function resetAriaId() {\n  ariaId = 0;\n}\nexport function generateAriaId(prefix) {\n  ariaId += 1;\n  return \"\".concat(prefix, \"_\").concat(ariaId);\n}\nexport function isLabelInValue(props) {\n  var treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      labelInValue = props.labelInValue;\n\n  if (treeCheckable && treeCheckStrictly) {\n    return true;\n  }\n\n  return labelInValue || false;\n} // =================== Tree ====================\n\nexport function parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _extends({}, node);\n\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Detect if position has relation.\n * e.g. 1-2 related with 1-2-3\n * e.g. 1-3-2 related with 1\n * e.g. 1-2 not related with 1-21\n */\n\nexport function isPosRelated(pos1, pos2) {\n  var fields1 = pos1.split('-');\n  var fields2 = pos2.split('-');\n  var minLen = Math.min(fields1.length, fields2.length);\n\n  for (var i = 0; i < minLen; i += 1) {\n    if (fields1[i] !== fields2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * This function is only used on treeNode check (none treeCheckStrictly but has searchInput).\n * We convert entity to { node, pos, children } format.\n * This is legacy bug but we still need to do with it.\n * @param entity\n */\n\nexport function cleanEntity(_ref2) {\n  var node = _ref2.node,\n      pos = _ref2.pos,\n      children = _ref2.children;\n  var instance = {\n    node: node,\n    pos: pos\n  };\n\n  if (children) {\n    instance.children = children.map(cleanEntity);\n  }\n\n  return instance;\n}\n/**\n * Get a filtered TreeNode list by provided treeNodes.\n * [Legacy] Since `Tree` use `key` as map but `key` will changed by React,\n * we have to convert `treeNodes > data > treeNodes` to keep the key.\n * Such performance hungry!\n */\n\nexport function getFilterTree(treeNodes, searchValue, filterFunc, valueEntities, Component) {\n  if (!searchValue) {\n    return null;\n  }\n\n  function mapFilteredNodeToData(node) {\n    if (!node || isEmptyElement(node)) return null;\n    var match = false;\n\n    if (filterFunc(searchValue, node)) {\n      match = true;\n    }\n\n    var children = getSlot(node);\n    children = ((typeof children === 'function' ? children() : children) || []).map(mapFilteredNodeToData).filter(function (n) {\n      return n;\n    });\n\n    if (children.length || match) {\n      return _createVNode(Component, _objectSpread(_objectSpread({}, node.props), {}, {\n        \"key\": valueEntities[getPropsData(node).value].key\n      }), {\n        default: function _default() {\n          return [children];\n        }\n      });\n    }\n\n    return null;\n  }\n\n  return treeNodes.map(mapFilteredNodeToData).filter(function (node) {\n    return node;\n  });\n} // =================== Value ===================\n\n/**\n * Convert value to array format to make logic simplify.\n */\n\nexport function formatInternalValue(value, props) {\n  var valueList = toArray(value); // Parse label in value\n\n  if (isLabelInValue(props)) {\n    return valueList.map(function (val) {\n      if (_typeof(val) !== 'object' || !val) {\n        return {\n          value: '',\n          label: ''\n        };\n      }\n\n      return val;\n    });\n  }\n\n  return valueList.map(function (val) {\n    return {\n      value: val\n    };\n  });\n}\nexport function getLabel(wrappedValue, entity, treeNodeLabelProp) {\n  if (wrappedValue.label) {\n    return wrappedValue.label;\n  }\n\n  if (entity) {\n    var props = getPropsData(entity.node);\n\n    if (Object.keys(props).length) {\n      return props[treeNodeLabelProp];\n    }\n  } // Since value without entity will be in missValueList.\n  // This code will never reached, but we still need this in case.\n\n\n  return wrappedValue.value;\n}\n/**\n * Convert internal state `valueList` to user needed value list.\n * This will return an array list. You need check if is not multiple when return.\n *\n * `allCheckedNodes` is used for `treeCheckStrictly`\n */\n\nexport function formatSelectorValue(valueList, props, valueEntities) {\n  var treeNodeLabelProp = props.treeNodeLabelProp,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      showCheckedStrategy = props.showCheckedStrategy; // Will hide some value if `showCheckedStrategy` is set\n\n  if (treeCheckable && !treeCheckStrictly) {\n    var values = {};\n    valueList.forEach(function (wrappedValue) {\n      values[wrappedValue.value] = wrappedValue;\n    });\n    var hierarchyList = flatToHierarchy(valueList.map(function (_ref3) {\n      var value = _ref3.value;\n      return valueEntities[value];\n    }));\n\n    if (showCheckedStrategy === SHOW_PARENT) {\n      // Only get the parent checked value\n      return hierarchyList.map(function (_ref4) {\n        var node = _ref4.node;\n        var value = getPropsData(node).value;\n        return {\n          label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n          value: value\n        };\n      });\n    }\n\n    if (showCheckedStrategy === SHOW_CHILD) {\n      // Only get the children checked value\n      var targetValueList = []; // Find the leaf children\n\n      var traverse = function traverse(_ref5) {\n        var node = _ref5.node,\n            children = _ref5.children;\n        var value = getPropsData(node).value;\n\n        if (!children || children.length === 0) {\n          targetValueList.push({\n            label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n            value: value\n          });\n          return;\n        }\n\n        children.forEach(function (entity) {\n          traverse(entity);\n        });\n      };\n\n      hierarchyList.forEach(function (entity) {\n        traverse(entity);\n      });\n      return targetValueList;\n    }\n  }\n\n  return valueList.map(function (wrappedValue) {\n    return {\n      label: getLabel(wrappedValue, valueEntities[wrappedValue.value], treeNodeLabelProp),\n      value: wrappedValue.value\n    };\n  });\n}\n/**\n * Use `rc-tree` convertDataToTree to convert treeData to TreeNodes.\n * This will change the label to title value\n */\n\nfunction processProps(props) {\n  var title = props.title,\n      label = props.label,\n      key = props.key,\n      value = props.value;\n\n  var cloneProps = _extends({}, props); // Warning user not to use deprecated label prop.\n\n\n  if (label && !title) {\n    if (!warnDeprecatedLabel) {\n      warning(false, \"'label' in treeData is deprecated. Please use 'title' instead.\");\n      warnDeprecatedLabel = true;\n    }\n\n    cloneProps.title = label;\n  }\n\n  if (!key && (key === undefined || key === null)) {\n    cloneProps.key = value;\n  }\n\n  return cloneProps;\n}\n\nexport function convertDataToTree(treeData) {\n  return vcConvertDataToTree(treeData, {\n    processProps: processProps\n  });\n}\n/**\n * Use `rc-tree` convertTreeToEntities for entities calculation.\n * We have additional entities of `valueEntities`\n */\n\nfunction initWrapper(wrapper) {\n  return _extends(_extends({}, wrapper), {\n    valueEntities: {}\n  });\n}\n\nfunction processEntity(entity, wrapper) {\n  var value = getPropsData(entity.node).value;\n  entity.value = value; // This should be empty, or will get error message.\n\n  var currentEntity = wrapper.valueEntities[value];\n\n  if (currentEntity) {\n    warning(false, \"Conflict! value of node '\".concat(entity.key, \"' (\").concat(value, \") has already used by node '\").concat(currentEntity.key, \"'.\"));\n  }\n\n  wrapper.valueEntities[value] = entity;\n}\n\nexport function convertTreeToEntities(treeNodes) {\n  return vcConvertTreeToEntities(treeNodes, {\n    initWrapper: initWrapper,\n    processEntity: processEntity\n  });\n}\n/**\n * https://github.com/ant-design/ant-design/issues/13328\n * We need calculate the half check key when searchValue is set.\n */\n// TODO: This logic may better move to rc-tree\n\nexport function getHalfCheckedKeys(valueList, valueEntities) {\n  var values = {}; // Fill checked keys\n\n  valueList.forEach(function (_ref6) {\n    var value = _ref6.value;\n    values[value] = false;\n  }); // Fill half checked keys\n\n  valueList.forEach(function (_ref7) {\n    var value = _ref7.value;\n    var current = valueEntities[value];\n\n    while (current && current.parent) {\n      var parentValue = current.parent.value;\n      if (parentValue in values) break;\n      values[parentValue] = true;\n      current = current.parent;\n    }\n  }); // Get half keys\n\n  return Object.keys(values).filter(function (value) {\n    return values[value];\n  }).map(function (value) {\n    return valueEntities[value].key;\n  });\n}\nexport var conductCheck = rcConductCheck;"],"mappings":";AAAA,OAAOA,OAAO,MAAM,mCAAmC;AACvD,OAAOC,aAAa,MAAM,0CAA0C;AACpE,OAAOC,QAAQ,MAAM,oCAAoC;AACzD,SAASC,WAAW,IAAIC,YAAY,QAAQ,KAAK;AACjD,OAAOC,OAAO,MAAM,SAAS;AAC7B,SAASC,iBAAiB,IAAIC,mBAAmB,EAAEC,qBAAqB,IAAIC,uBAAuB,EAAEC,YAAY,IAAIC,cAAc,QAAQ,wBAAwB;AACnK,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,UAAU,EAAEC,WAAW,QAAQ,cAAc;AACtD,SAASC,OAAO,EAAEC,YAAY,EAAEC,cAAc,QAAQ,wBAAwB;AAC9E,IAAIC,mBAAmB,GAAG,KAAK,CAAC,CAAC;;AAEjC,OAAO,SAASC,kBAAkBA,CAACC,IAAI,EAAEC,WAAW,EAAE;EACpD,IAAIC,OAAO,GAAGF,IAAI;EAElB,OAAOE,OAAO,EAAE;IACd,IAAIV,QAAQ,CAACU,OAAO,EAAED,WAAW,CAAC,EAAE;MAClC,OAAOC,OAAO;IAChB;IAEAA,OAAO,GAAGA,OAAO,CAACC,UAAU;EAC9B;EAEA,OAAO,IAAI;AACb,CAAC,CAAC;;AAEF,OAAO,SAASC,OAAOA,CAACC,KAAK,EAAE;EAC7B,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOA,KAAK;EACd;EAEA,OAAO,IAAI;AACb;AACA,OAAO,SAASC,OAAOA,CAACC,IAAI,EAAE;EAC5B,IAAIA,IAAI,KAAKC,SAAS,IAAID,IAAI,KAAK,IAAI,EAAE,OAAO,EAAE;EAClD,OAAOE,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC;AAC5C;AACA,OAAO,SAASI,SAASA,CAAA,EAAG;EAC1B,IAAIC,IAAI,GAAG,SAASC,MAAMA,CAACb,IAAI,EAAE;IAC/BY,IAAI,CAACV,OAAO,GAAGF,IAAI;EACrB,CAAC;EAED,OAAOY,IAAI;AACb,CAAC,CAAC;;AAEF,OAAO,IAAIE,kBAAkB,GAAG;EAC9BC,UAAU,EAAE,MAAM;EAClBC,gBAAgB,EAAE;AACpB,CAAC;AACD,OAAO,IAAIC,sBAAsB,GAAG;EAClCC,YAAY,EAAE;AAChB,CAAC;AACD;AACA;AACA;AACA;;AAEA,OAAO,SAASC,eAAeA,CAACC,YAAY,EAAE;EAC5C,IAAI,CAACA,YAAY,CAACC,MAAM,EAAE;IACxB,OAAO,EAAE;EACX;EAEA,IAAIC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEpB,IAAIC,MAAM,GAAG,CAAC,CAAC;EACf,IAAIC,UAAU,GAAGJ,YAAY,CAACK,KAAK,CAAC,CAAC,CAACC,GAAG,CAAC,UAAUC,MAAM,EAAE;IAC1D,IAAIC,KAAK,GAAG9C,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE6C,MAAM,CAAC,EAAE;MACzCE,MAAM,EAAEF,MAAM,CAACG,GAAG,CAACC,KAAK,CAAC,GAAG;IAC9B,CAAC,CAAC;IAEF,OAAOH,KAAK,CAACI,QAAQ;IACrB,OAAOJ,KAAK;EACd,CAAC,CAAC;EACFJ,UAAU,CAACS,OAAO,CAAC,UAAUN,MAAM,EAAE;IACnCJ,MAAM,CAACI,MAAM,CAACG,GAAG,CAAC,GAAGH,MAAM;EAC7B,CAAC,CAAC;EACFH,UAAU,CAACU,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;IAC9B,OAAOD,CAAC,CAACN,MAAM,CAACR,MAAM,GAAGe,CAAC,CAACP,MAAM,CAACR,MAAM;EAC1C,CAAC,CAAC,CAAC,CAAC;;EAEJG,UAAU,CAACS,OAAO,CAAC,UAAUN,MAAM,EAAE;IACnC,IAAIU,SAAS,GAAGV,MAAM,CAACE,MAAM,CAACJ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACa,IAAI,CAAC,GAAG,CAAC;IACpD,IAAIC,YAAY,GAAGhB,MAAM,CAACc,SAAS,CAAC;IAEpC,IAAI,CAACE,YAAY,EAAE;MACjBjB,SAAS,CAACK,MAAM,CAACG,GAAG,CAAC,GAAGH,MAAM;IAChC,CAAC,MAAM;MACLY,YAAY,CAACP,QAAQ,GAAGO,YAAY,CAACP,QAAQ,IAAI,EAAE;MACnDO,YAAY,CAACP,QAAQ,CAACQ,IAAI,CAACb,MAAM,CAAC;IACpC,CAAC,CAAC;;IAGF,OAAOA,MAAM,CAACc,GAAG;IACjB,OAAOd,MAAM,CAACE,MAAM;EACtB,CAAC,CAAC;EACF,OAAOa,MAAM,CAACC,IAAI,CAACrB,SAAS,CAAC,CAACI,GAAG,CAAC,UAAUe,GAAG,EAAE;IAC/C,OAAOnB,SAAS,CAACmB,GAAG,CAAC;EACvB,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF,IAAIG,MAAM,GAAG,CAAC;AACd,OAAO,SAASC,WAAWA,CAAA,EAAG;EAC5BD,MAAM,GAAG,CAAC;AACZ;AACA,OAAO,SAASE,cAAcA,CAACC,MAAM,EAAE;EACrCH,MAAM,IAAI,CAAC;EACX,OAAO,EAAE,CAACI,MAAM,CAACD,MAAM,EAAE,GAAG,CAAC,CAACC,MAAM,CAACJ,MAAM,CAAC;AAC9C;AACA,OAAO,SAASK,cAAcA,CAACC,KAAK,EAAE;EACpC,IAAIC,aAAa,GAAGD,KAAK,CAACC,aAAa;IACnCC,iBAAiB,GAAGF,KAAK,CAACE,iBAAiB;IAC3CC,YAAY,GAAGH,KAAK,CAACG,YAAY;EAErC,IAAIF,aAAa,IAAIC,iBAAiB,EAAE;IACtC,OAAO,IAAI;EACb;EAEA,OAAOC,YAAY,IAAI,KAAK;AAC9B,CAAC,CAAC;;AAEF,OAAO,SAASC,mBAAmBA,CAACC,QAAQ,EAAEC,IAAI,EAAE;EAClD,IAAIC,EAAE,GAAGD,IAAI,CAACC,EAAE;IACZC,GAAG,GAAGF,IAAI,CAACE,GAAG;IACdC,OAAO,GAAGH,IAAI,CAACG,OAAO;EAC1B,IAAIC,QAAQ,GAAG,CAAC,CAAC;EACjB,IAAIC,YAAY,GAAG,EAAE,CAAC,CAAC;;EAEvB,IAAIC,QAAQ,GAAGP,QAAQ,CAAC7B,GAAG,CAAC,UAAU1B,IAAI,EAAE;IAC1C,IAAI4B,KAAK,GAAG9C,QAAQ,CAAC,CAAC,CAAC,EAAEkB,IAAI,CAAC;IAE9B,IAAIyC,GAAG,GAAGb,KAAK,CAAC6B,EAAE,CAAC;IACnBG,QAAQ,CAACnB,GAAG,CAAC,GAAGb,KAAK;IACrBA,KAAK,CAACa,GAAG,GAAGb,KAAK,CAACa,GAAG,IAAIA,GAAG;IAC5B,OAAOb,KAAK;EACd,CAAC,CAAC,CAAC,CAAC;;EAEJkC,QAAQ,CAAC7B,OAAO,CAAC,UAAUjC,IAAI,EAAE;IAC/B,IAAI+D,SAAS,GAAG/D,IAAI,CAAC0D,GAAG,CAAC;IACzB,IAAIM,MAAM,GAAGJ,QAAQ,CAACG,SAAS,CAAC,CAAC,CAAC;;IAElC,IAAIC,MAAM,EAAE;MACVA,MAAM,CAAChC,QAAQ,GAAGgC,MAAM,CAAChC,QAAQ,IAAI,EAAE;MACvCgC,MAAM,CAAChC,QAAQ,CAACQ,IAAI,CAACxC,IAAI,CAAC;IAC5B,CAAC,CAAC;;IAGF,IAAI+D,SAAS,KAAKJ,OAAO,IAAI,CAACK,MAAM,IAAIL,OAAO,KAAK,IAAI,EAAE;MACxDE,YAAY,CAACrB,IAAI,CAACxC,IAAI,CAAC;IACzB;EACF,CAAC,CAAC;EACF,OAAO6D,YAAY;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASI,YAAYA,CAACC,IAAI,EAAEC,IAAI,EAAE;EACvC,IAAIC,OAAO,GAAGF,IAAI,CAACnC,KAAK,CAAC,GAAG,CAAC;EAC7B,IAAIsC,OAAO,GAAGF,IAAI,CAACpC,KAAK,CAAC,GAAG,CAAC;EAC7B,IAAIuC,MAAM,GAAGC,IAAI,CAACC,GAAG,CAACJ,OAAO,CAAC/C,MAAM,EAAEgD,OAAO,CAAChD,MAAM,CAAC;EAErD,KAAK,IAAIoD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,IAAI,CAAC,EAAE;IAClC,IAAIL,OAAO,CAACK,CAAC,CAAC,KAAKJ,OAAO,CAACI,CAAC,CAAC,EAAE;MAC7B,OAAO,KAAK;IACd;EACF;EAEA,OAAO,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,WAAWA,CAACC,KAAK,EAAE;EACjC,IAAI3E,IAAI,GAAG2E,KAAK,CAAC3E,IAAI;IACjB8B,GAAG,GAAG6C,KAAK,CAAC7C,GAAG;IACfE,QAAQ,GAAG2C,KAAK,CAAC3C,QAAQ;EAC7B,IAAI4C,QAAQ,GAAG;IACb5E,IAAI,EAAEA,IAAI;IACV8B,GAAG,EAAEA;EACP,CAAC;EAED,IAAIE,QAAQ,EAAE;IACZ4C,QAAQ,CAAC5C,QAAQ,GAAGA,QAAQ,CAACN,GAAG,CAACgD,WAAW,CAAC;EAC/C;EAEA,OAAOE,QAAQ;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,aAAaA,CAACC,SAAS,EAAEC,WAAW,EAAEC,UAAU,EAAEC,aAAa,EAAEC,SAAS,EAAE;EAC1F,IAAI,CAACH,WAAW,EAAE;IAChB,OAAO,IAAI;EACb;EAEA,SAASI,qBAAqBA,CAACnF,IAAI,EAAE;IACnC,IAAI,CAACA,IAAI,IAAIH,cAAc,CAACG,IAAI,CAAC,EAAE,OAAO,IAAI;IAC9C,IAAIoF,KAAK,GAAG,KAAK;IAEjB,IAAIJ,UAAU,CAACD,WAAW,EAAE/E,IAAI,CAAC,EAAE;MACjCoF,KAAK,GAAG,IAAI;IACd;IAEA,IAAIpD,QAAQ,GAAGrC,OAAO,CAACK,IAAI,CAAC;IAC5BgC,QAAQ,GAAG,CAAC,CAAC,OAAOA,QAAQ,KAAK,UAAU,GAAGA,QAAQ,CAAC,CAAC,GAAGA,QAAQ,KAAK,EAAE,EAAEN,GAAG,CAACyD,qBAAqB,CAAC,CAACE,MAAM,CAAC,UAAUC,CAAC,EAAE;MACzH,OAAOA,CAAC;IACV,CAAC,CAAC;IAEF,IAAItD,QAAQ,CAACX,MAAM,IAAI+D,KAAK,EAAE;MAC5B,OAAOpG,YAAY,CAACkG,SAAS,EAAErG,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAEmB,IAAI,CAACkD,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE;QAC9E,KAAK,EAAE+B,aAAa,CAACrF,YAAY,CAACI,IAAI,CAAC,CAACuF,KAAK,CAAC,CAAC9C;MACjD,CAAC,CAAC,EAAE;QACF+C,OAAO,EAAE,SAASC,QAAQA,CAAA,EAAG;UAC3B,OAAO,CAACzD,QAAQ,CAAC;QACnB;MACF,CAAC,CAAC;IACJ;IAEA,OAAO,IAAI;EACb;EAEA,OAAO8C,SAAS,CAACpD,GAAG,CAACyD,qBAAqB,CAAC,CAACE,MAAM,CAAC,UAAUrF,IAAI,EAAE;IACjE,OAAOA,IAAI;EACb,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA,OAAO,SAAS0F,mBAAmBA,CAACH,KAAK,EAAErC,KAAK,EAAE;EAChD,IAAIyC,SAAS,GAAGrF,OAAO,CAACiF,KAAK,CAAC,CAAC,CAAC;;EAEhC,IAAItC,cAAc,CAACC,KAAK,CAAC,EAAE;IACzB,OAAOyC,SAAS,CAACjE,GAAG,CAAC,UAAUkE,GAAG,EAAE;MAClC,IAAIhH,OAAO,CAACgH,GAAG,CAAC,KAAK,QAAQ,IAAI,CAACA,GAAG,EAAE;QACrC,OAAO;UACLL,KAAK,EAAE,EAAE;UACTM,KAAK,EAAE;QACT,CAAC;MACH;MAEA,OAAOD,GAAG;IACZ,CAAC,CAAC;EACJ;EAEA,OAAOD,SAAS,CAACjE,GAAG,CAAC,UAAUkE,GAAG,EAAE;IAClC,OAAO;MACLL,KAAK,EAAEK;IACT,CAAC;EACH,CAAC,CAAC;AACJ;AACA,OAAO,SAASE,QAAQA,CAACC,YAAY,EAAEpE,MAAM,EAAEqE,iBAAiB,EAAE;EAChE,IAAID,YAAY,CAACF,KAAK,EAAE;IACtB,OAAOE,YAAY,CAACF,KAAK;EAC3B;EAEA,IAAIlE,MAAM,EAAE;IACV,IAAIuB,KAAK,GAAGtD,YAAY,CAAC+B,MAAM,CAAC3B,IAAI,CAAC;IAErC,IAAI0C,MAAM,CAACC,IAAI,CAACO,KAAK,CAAC,CAAC7B,MAAM,EAAE;MAC7B,OAAO6B,KAAK,CAAC8C,iBAAiB,CAAC;IACjC;EACF,CAAC,CAAC;EACF;;EAGA,OAAOD,YAAY,CAACR,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASU,mBAAmBA,CAACN,SAAS,EAAEzC,KAAK,EAAE+B,aAAa,EAAE;EACnE,IAAIe,iBAAiB,GAAG9C,KAAK,CAAC8C,iBAAiB;IAC3C7C,aAAa,GAAGD,KAAK,CAACC,aAAa;IACnCC,iBAAiB,GAAGF,KAAK,CAACE,iBAAiB;IAC3C8C,mBAAmB,GAAGhD,KAAK,CAACgD,mBAAmB,CAAC,CAAC;;EAErD,IAAI/C,aAAa,IAAI,CAACC,iBAAiB,EAAE;IACvC,IAAI+C,MAAM,GAAG,CAAC,CAAC;IACfR,SAAS,CAAC1D,OAAO,CAAC,UAAU8D,YAAY,EAAE;MACxCI,MAAM,CAACJ,YAAY,CAACR,KAAK,CAAC,GAAGQ,YAAY;IAC3C,CAAC,CAAC;IACF,IAAIK,aAAa,GAAGjF,eAAe,CAACwE,SAAS,CAACjE,GAAG,CAAC,UAAU2E,KAAK,EAAE;MACjE,IAAId,KAAK,GAAGc,KAAK,CAACd,KAAK;MACvB,OAAON,aAAa,CAACM,KAAK,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,IAAIW,mBAAmB,KAAKxG,WAAW,EAAE;MACvC;MACA,OAAO0G,aAAa,CAAC1E,GAAG,CAAC,UAAU4E,KAAK,EAAE;QACxC,IAAItG,IAAI,GAAGsG,KAAK,CAACtG,IAAI;QACrB,IAAIuF,KAAK,GAAG3F,YAAY,CAACI,IAAI,CAAC,CAACuF,KAAK;QACpC,OAAO;UACLM,KAAK,EAAEC,QAAQ,CAACK,MAAM,CAACZ,KAAK,CAAC,EAAEN,aAAa,CAACM,KAAK,CAAC,EAAES,iBAAiB,CAAC;UACvET,KAAK,EAAEA;QACT,CAAC;MACH,CAAC,CAAC;IACJ;IAEA,IAAIW,mBAAmB,KAAKzG,UAAU,EAAE;MACtC;MACA,IAAI8G,eAAe,GAAG,EAAE,CAAC,CAAC;;MAE1B,IAAIC,QAAQ,GAAG,SAASA,QAAQA,CAACC,KAAK,EAAE;QACtC,IAAIzG,IAAI,GAAGyG,KAAK,CAACzG,IAAI;UACjBgC,QAAQ,GAAGyE,KAAK,CAACzE,QAAQ;QAC7B,IAAIuD,KAAK,GAAG3F,YAAY,CAACI,IAAI,CAAC,CAACuF,KAAK;QAEpC,IAAI,CAACvD,QAAQ,IAAIA,QAAQ,CAACX,MAAM,KAAK,CAAC,EAAE;UACtCkF,eAAe,CAAC/D,IAAI,CAAC;YACnBqD,KAAK,EAAEC,QAAQ,CAACK,MAAM,CAACZ,KAAK,CAAC,EAAEN,aAAa,CAACM,KAAK,CAAC,EAAES,iBAAiB,CAAC;YACvET,KAAK,EAAEA;UACT,CAAC,CAAC;UACF;QACF;QAEAvD,QAAQ,CAACC,OAAO,CAAC,UAAUN,MAAM,EAAE;UACjC6E,QAAQ,CAAC7E,MAAM,CAAC;QAClB,CAAC,CAAC;MACJ,CAAC;MAEDyE,aAAa,CAACnE,OAAO,CAAC,UAAUN,MAAM,EAAE;QACtC6E,QAAQ,CAAC7E,MAAM,CAAC;MAClB,CAAC,CAAC;MACF,OAAO4E,eAAe;IACxB;EACF;EAEA,OAAOZ,SAAS,CAACjE,GAAG,CAAC,UAAUqE,YAAY,EAAE;IAC3C,OAAO;MACLF,KAAK,EAAEC,QAAQ,CAACC,YAAY,EAAEd,aAAa,CAACc,YAAY,CAACR,KAAK,CAAC,EAAES,iBAAiB,CAAC;MACnFT,KAAK,EAAEQ,YAAY,CAACR;IACtB,CAAC;EACH,CAAC,CAAC;AACJ;AACA;AACA;AACA;AACA;;AAEA,SAASmB,YAAYA,CAACxD,KAAK,EAAE;EAC3B,IAAI7C,KAAK,GAAG6C,KAAK,CAAC7C,KAAK;IACnBwF,KAAK,GAAG3C,KAAK,CAAC2C,KAAK;IACnBpD,GAAG,GAAGS,KAAK,CAACT,GAAG;IACf8C,KAAK,GAAGrC,KAAK,CAACqC,KAAK;EAEvB,IAAIoB,UAAU,GAAG7H,QAAQ,CAAC,CAAC,CAAC,EAAEoE,KAAK,CAAC,CAAC,CAAC;;EAGtC,IAAI2C,KAAK,IAAI,CAACxF,KAAK,EAAE;IACnB,IAAI,CAACP,mBAAmB,EAAE;MACxBb,OAAO,CAAC,KAAK,EAAE,gEAAgE,CAAC;MAChFa,mBAAmB,GAAG,IAAI;IAC5B;IAEA6G,UAAU,CAACtG,KAAK,GAAGwF,KAAK;EAC1B;EAEA,IAAI,CAACpD,GAAG,KAAKA,GAAG,KAAKjC,SAAS,IAAIiC,GAAG,KAAK,IAAI,CAAC,EAAE;IAC/CkE,UAAU,CAAClE,GAAG,GAAG8C,KAAK;EACxB;EAEA,OAAOoB,UAAU;AACnB;AAEA,OAAO,SAASzH,iBAAiBA,CAACqE,QAAQ,EAAE;EAC1C,OAAOpE,mBAAmB,CAACoE,QAAQ,EAAE;IACnCmD,YAAY,EAAEA;EAChB,CAAC,CAAC;AACJ;AACA;AACA;AACA;AACA;;AAEA,SAASE,WAAWA,CAACC,OAAO,EAAE;EAC5B,OAAO/H,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE+H,OAAO,CAAC,EAAE;IACrC5B,aAAa,EAAE,CAAC;EAClB,CAAC,CAAC;AACJ;AAEA,SAAS6B,aAAaA,CAACnF,MAAM,EAAEkF,OAAO,EAAE;EACtC,IAAItB,KAAK,GAAG3F,YAAY,CAAC+B,MAAM,CAAC3B,IAAI,CAAC,CAACuF,KAAK;EAC3C5D,MAAM,CAAC4D,KAAK,GAAGA,KAAK,CAAC,CAAC;;EAEtB,IAAIwB,aAAa,GAAGF,OAAO,CAAC5B,aAAa,CAACM,KAAK,CAAC;EAEhD,IAAIwB,aAAa,EAAE;IACjB9H,OAAO,CAAC,KAAK,EAAE,2BAA2B,CAAC+D,MAAM,CAACrB,MAAM,CAACc,GAAG,EAAE,KAAK,CAAC,CAACO,MAAM,CAACuC,KAAK,EAAE,8BAA8B,CAAC,CAACvC,MAAM,CAAC+D,aAAa,CAACtE,GAAG,EAAE,IAAI,CAAC,CAAC;EACrJ;EAEAoE,OAAO,CAAC5B,aAAa,CAACM,KAAK,CAAC,GAAG5D,MAAM;AACvC;AAEA,OAAO,SAASvC,qBAAqBA,CAAC0F,SAAS,EAAE;EAC/C,OAAOzF,uBAAuB,CAACyF,SAAS,EAAE;IACxC8B,WAAW,EAAEA,WAAW;IACxBE,aAAa,EAAEA;EACjB,CAAC,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,kBAAkBA,CAACrB,SAAS,EAAEV,aAAa,EAAE;EAC3D,IAAIkB,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEjBR,SAAS,CAAC1D,OAAO,CAAC,UAAUgF,KAAK,EAAE;IACjC,IAAI1B,KAAK,GAAG0B,KAAK,CAAC1B,KAAK;IACvBY,MAAM,CAACZ,KAAK,CAAC,GAAG,KAAK;EACvB,CAAC,CAAC,CAAC,CAAC;;EAEJI,SAAS,CAAC1D,OAAO,CAAC,UAAUiF,KAAK,EAAE;IACjC,IAAI3B,KAAK,GAAG2B,KAAK,CAAC3B,KAAK;IACvB,IAAIrF,OAAO,GAAG+E,aAAa,CAACM,KAAK,CAAC;IAElC,OAAOrF,OAAO,IAAIA,OAAO,CAAC8D,MAAM,EAAE;MAChC,IAAImD,WAAW,GAAGjH,OAAO,CAAC8D,MAAM,CAACuB,KAAK;MACtC,IAAI4B,WAAW,IAAIhB,MAAM,EAAE;MAC3BA,MAAM,CAACgB,WAAW,CAAC,GAAG,IAAI;MAC1BjH,OAAO,GAAGA,OAAO,CAAC8D,MAAM;IAC1B;EACF,CAAC,CAAC,CAAC,CAAC;;EAEJ,OAAOtB,MAAM,CAACC,IAAI,CAACwD,MAAM,CAAC,CAACd,MAAM,CAAC,UAAUE,KAAK,EAAE;IACjD,OAAOY,MAAM,CAACZ,KAAK,CAAC;EACtB,CAAC,CAAC,CAAC7D,GAAG,CAAC,UAAU6D,KAAK,EAAE;IACtB,OAAON,aAAa,CAACM,KAAK,CAAC,CAAC9C,GAAG;EACjC,CAAC,CAAC;AACJ;AACA,OAAO,IAAInD,YAAY,GAAGC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}