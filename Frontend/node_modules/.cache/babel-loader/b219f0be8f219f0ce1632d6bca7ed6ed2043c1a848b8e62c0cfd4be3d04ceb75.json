{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\n\n/**\n * ARIA: https://www.w3.org/TR/wai-aria/#combobox\n * Sample 1: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/combobox/aria1.1pattern/listbox-combo.html\n * Sample 2: https://www.w3.org/blog/wai-components-gallery/widget/combobox-with-aria-autocompleteinline/\n *\n * Tab logic:\n * Popup is close\n * 1. Focus input (mark component as focused)\n * 2. Press enter to show the popup\n * 3. If popup has input, focus it\n *\n * Popup is open\n * 1. press tab to close the popup\n * 2. Focus back to the selection input box\n * 3. Let the native tab going on\n *\n * TreeSelect use 2 design type.\n * In single mode, we should focus on the `span`\n * In multiple mode, we should focus on the `input`\n */\nimport { defineComponent, provide } from 'vue';\nimport shallowEqual from '../../_util/shallowequal';\nimport scrollIntoView from 'dom-scroll-into-view';\nimport warning from 'warning';\nimport PropTypes, { withUndefined } from '../../_util/vue-types';\nimport KeyCode from '../../_util/KeyCode';\nimport SelectTrigger from './SelectTrigger';\nimport SingleSelector from './Selector/SingleSelector';\nimport MultipleSelector from './Selector/MultipleSelector';\nimport { SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './strategies';\nimport BaseMixin from '../../_util/BaseMixin';\nimport { createRef, generateAriaId, formatInternalValue, formatSelectorValue, parseSimpleTreeData, convertDataToTree, convertTreeToEntities, conductCheck, getHalfCheckedKeys, flatToHierarchy, isPosRelated, isLabelInValue as _isLabelInValue, getFilterTree, cleanEntity, findPopupContainer } from './util';\nimport SelectNode from './SelectNode';\nimport { initDefaultProps, getOptionProps, getPropsData, findDOMNode } from '../../_util/props-util';\nimport BasePopup from './Popup/MultiplePopup';\nfunction getWatch() {\n  var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var watch = {};\n  keys.forEach(function (k) {\n    watch[k] = function () {\n      this.needSyncKeys[k] = true;\n    };\n  });\n  return watch;\n}\nvar Select = defineComponent({\n  name: 'Select',\n  mixins: [BaseMixin],\n  inheritAttrs: false,\n  props: initDefaultProps({\n    prefixCls: PropTypes.string,\n    prefixAria: PropTypes.string,\n    multiple: PropTypes.looseBool,\n    showArrow: PropTypes.looseBool,\n    open: PropTypes.looseBool,\n    value: PropTypes.any,\n    autofocus: PropTypes.looseBool,\n    defaultOpen: PropTypes.looseBool,\n    defaultValue: PropTypes.any,\n    showSearch: PropTypes.looseBool,\n    placeholder: PropTypes.any,\n    inputValue: PropTypes.string,\n    searchValue: PropTypes.string,\n    autoClearSearchValue: PropTypes.looseBool,\n    searchPlaceholder: PropTypes.any,\n    disabled: PropTypes.looseBool,\n    children: PropTypes.any,\n    labelInValue: PropTypes.looseBool,\n    maxTagCount: PropTypes.number,\n    maxTagPlaceholder: PropTypes.any,\n    maxTagTextLength: PropTypes.number,\n    showCheckedStrategy: PropTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),\n    dropdownClassName: PropTypes.string,\n    dropdownStyle: PropTypes.object,\n    dropdownVisibleChange: PropTypes.func,\n    dropdownMatchSelectWidth: PropTypes.looseBool,\n    treeData: PropTypes.array,\n    treeDataSimpleMode: withUndefined(PropTypes.oneOfType([PropTypes.looseBool, PropTypes.object])),\n    treeNodeFilterProp: PropTypes.string,\n    treeNodeLabelProp: PropTypes.string,\n    treeCheckable: PropTypes.any,\n    // treeCheckable: PropTypes.any,\n    treeCheckStrictly: PropTypes.looseBool,\n    treeIcon: PropTypes.looseBool,\n    treeLine: PropTypes.looseBool,\n    treeDefaultExpandAll: PropTypes.looseBool,\n    treeDefaultExpandedKeys: PropTypes.array,\n    treeExpandedKeys: PropTypes.array,\n    loadData: PropTypes.func,\n    filterTreeNode: withUndefined(PropTypes.oneOfType([PropTypes.func, PropTypes.looseBool])),\n    notFoundContent: PropTypes.any,\n    getPopupContainer: PropTypes.func,\n    // onSearch: PropTypes.func,\n    // onSelect: PropTypes.func,\n    // onDeselect: PropTypes.func,\n    // onChange: PropTypes.func,\n    // onDropdownVisibleChange: PropTypes.func,\n    // onTreeExpand: PropTypes.func,\n    allowClear: PropTypes.looseBool,\n    transitionName: PropTypes.string,\n    animation: PropTypes.string,\n    choiceTransitionName: PropTypes.string,\n    inputIcon: PropTypes.any,\n    clearIcon: PropTypes.any,\n    removeIcon: PropTypes.any,\n    switcherIcon: PropTypes.any,\n    __propsSymbol__: PropTypes.any\n  }, {\n    prefixCls: 'rc-tree-select',\n    prefixAria: 'rc-tree-select',\n    showArrow: true,\n    showSearch: true,\n    autoClearSearchValue: true,\n    showCheckedStrategy: SHOW_CHILD,\n    // dropdownMatchSelectWidth change the origin design, set to false now\n    // ref: https://github.com/react-component/select/blob/4cad95e098a341a09de239ad6981067188842020/src/Select.jsx#L344\n    // ref: https://github.com/react-component/select/pull/71\n    treeNodeFilterProp: 'value',\n    treeNodeLabelProp: 'title',\n    treeIcon: false,\n    notFoundContent: 'Not Found',\n    dropdownStyle: {},\n    dropdownVisibleChange: function dropdownVisibleChange() {\n      return true;\n    }\n  }),\n  data: function data() {\n    warning(this.$props.__propsSymbol__, 'must pass __propsSymbol__');\n    var _this$$props = this.$props,\n      prefixAria = _this$$props.prefixAria,\n      defaultOpen = _this$$props.defaultOpen,\n      open = _this$$props.open;\n    this.needSyncKeys = {};\n    this.selectorRef = createRef();\n    this.selectTriggerRef = createRef(); // ARIA need `aria-controls` props mapping\n    // Since this need user input. Let's generate ourselves\n\n    this.ariaId = generateAriaId(\"\".concat(prefixAria, \"-list\"));\n    var state = {\n      _open: open || defaultOpen,\n      _valueList: [],\n      _searchHalfCheckedKeys: [],\n      _missValueList: [],\n      _selectorValueList: [],\n      _valueEntities: {},\n      _posEntities: new Map(),\n      _keyEntities: new Map(),\n      _searchValue: '',\n      _prevProps: {},\n      _init: true,\n      _focused: undefined,\n      _treeNodes: undefined,\n      _filteredTreeNodes: undefined\n    };\n    var newState = this.getDerivedState(this.$props, state);\n    return _extends(_extends({}, state), newState);\n  },\n  watch: _extends(_extends({}, getWatch(['treeData', 'defaultValue', 'value'])), {\n    __propsSymbol__: function __propsSymbol__() {\n      var state = this.getDerivedState(this.$props, this.$data);\n      this.setState(state);\n      this.needSyncKeys = {};\n    },\n    _valueList: function _valueList() {\n      var _this = this;\n      this.$nextTick(function () {\n        _this.forcePopupAlign();\n      });\n    },\n    _open: function _open(open) {\n      var _this2 = this;\n      this.$nextTick(function () {\n        if (!open && !_this2.isSearchValueControlled()) {\n          _this2.setState({\n            _searchValue: ''\n          });\n        }\n        if (open && !_this2.$data._searchValue) {\n          _this2.setState({\n            _filteredTreeNodes: null\n          });\n        }\n        var prefixCls = _this2.$props.prefixCls;\n        var _this2$$data = _this2.$data,\n          selectorValueList = _this2$$data._selectorValueList,\n          valueEntities = _this2$$data._valueEntities;\n        var isMultiple = _this2.isMultiple(); // Scroll to value position, only need sync on single mode\n\n        if (!isMultiple && selectorValueList.length && open && _this2.popup) {\n          var value = selectorValueList[0].value;\n          var _this2$popup$getTree = _this2.popup.getTree(),\n            domTreeNodes = _this2$popup$getTree.domTreeNodes;\n          var _ref = valueEntities[value] || {},\n            key = _ref.key;\n          var treeNode = domTreeNodes[key];\n          if (treeNode) {\n            var domNode = findDOMNode(treeNode);\n            requestAnimationFrame(function () {\n              var popupNode = findDOMNode(_this2.popup);\n              var triggerContainer = findPopupContainer(popupNode, \"\".concat(prefixCls, \"-dropdown\"));\n              if (domNode && triggerContainer) {\n                scrollIntoView(domNode, triggerContainer, {\n                  onlyScrollIfNeeded: true,\n                  offsetTop: 0\n                });\n              }\n            });\n          }\n        }\n      });\n    }\n  }),\n  created: function created() {\n    provide('vcTreeSelect', {\n      onSelectorFocus: this.onSelectorFocus,\n      onSelectorBlur: this.onSelectorBlur,\n      onSelectorKeyDown: this.onComponentKeyDown,\n      onSelectorClear: this.onSelectorClear,\n      onMultipleSelectorRemove: this.onMultipleSelectorRemove,\n      onTreeNodeSelect: this.onTreeNodeSelect,\n      onTreeNodeCheck: this.onTreeNodeCheck,\n      onPopupKeyDown: this.onComponentKeyDown,\n      onSearchInputChange: this.onSearchInputChange,\n      onSearchInputKeyDown: this.onSearchInputKeyDown\n    });\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n    this.$nextTick(function () {\n      var _this3$$props = _this3.$props,\n        autofocus = _this3$$props.autofocus,\n        disabled = _this3$$props.disabled;\n      if (autofocus && !disabled) {\n        _this3.focus();\n      }\n    });\n  },\n  methods: {\n    getDerivedState: function getDerivedState(nextProps, prevState) {\n      var _prevState$_prevProps = prevState._prevProps,\n        prevProps = _prevState$_prevProps === void 0 ? {} : _prevState$_prevProps;\n      var treeCheckable = nextProps.treeCheckable,\n        treeCheckStrictly = nextProps.treeCheckStrictly,\n        filterTreeNode = nextProps.filterTreeNode,\n        treeNodeFilterProp = nextProps.treeNodeFilterProp,\n        treeDataSimpleMode = nextProps.treeDataSimpleMode;\n      var newState = {\n        _prevProps: _extends({}, nextProps),\n        _init: false\n      };\n      var self = this; // Process the state when props updated\n\n      function processState(propName, updater) {\n        if (prevProps[propName] !== nextProps[propName] || self.needSyncKeys[propName]) {\n          updater(nextProps[propName], prevProps[propName]);\n          return true;\n        }\n        return false;\n      }\n      var valueRefresh = false; // Open\n\n      processState('open', function (propValue) {\n        newState._open = propValue;\n      }); // Tree Nodes\n\n      var treeNodes;\n      var treeDataChanged = false;\n      var treeDataModeChanged = false;\n      processState('treeData', function (propValue) {\n        treeNodes = convertDataToTree(propValue);\n        treeDataChanged = true;\n      });\n      processState('treeDataSimpleMode', function (propValue, prevValue) {\n        if (!propValue) return;\n        var prev = !prevValue || prevValue === true ? {} : prevValue; // Shallow equal to avoid dynamic prop object\n\n        if (!shallowEqual(propValue, prev)) {\n          treeDataModeChanged = true;\n        }\n      }); // Parse by `treeDataSimpleMode`\n\n      if (treeDataSimpleMode && (treeDataChanged || treeDataModeChanged)) {\n        var simpleMapper = _extends({\n          id: 'id',\n          pId: 'pId',\n          rootPId: null\n        }, treeDataSimpleMode !== true ? treeDataSimpleMode : {});\n        treeNodes = convertDataToTree(parseSimpleTreeData(nextProps.treeData, simpleMapper));\n      } // If `treeData` not provide, use children TreeNodes\n\n      if (!nextProps.treeData) {\n        // processState('children', (propValue) => {\n        //   treeNodes = Array.isArray(propValue) ? propValue : [propValue]\n        // })\n        treeNodes = this.children || [];\n      } // Convert `treeData` to entities\n\n      if (treeNodes) {\n        var entitiesMap = convertTreeToEntities(treeNodes);\n        newState._treeNodes = treeNodes;\n        newState._posEntities = entitiesMap.posEntities;\n        newState._valueEntities = entitiesMap.valueEntities;\n        newState._keyEntities = entitiesMap.keyEntities;\n        valueRefresh = true;\n      } // Value List\n\n      if (prevState._init) {\n        processState('defaultValue', function (propValue) {\n          newState._valueList = formatInternalValue(propValue, nextProps);\n          valueRefresh = true;\n        });\n      }\n      processState('value', function (propValue) {\n        newState._valueList = formatInternalValue(propValue, nextProps);\n        valueRefresh = true;\n      }); // Selector Value List\n\n      if (valueRefresh) {\n        // Find out that value not exist in the tree\n        var missValueList = [];\n        var filteredValueList = [];\n        var keyList = []; // Get latest value list\n\n        var latestValueList = newState._valueList;\n        if (!latestValueList) {\n          // Also need add prev missValueList to avoid new treeNodes contains the value\n          latestValueList = [].concat(_toConsumableArray(prevState._valueList), _toConsumableArray(prevState._missValueList));\n        } // Get key by value\n\n        var valueLabels = {};\n        latestValueList.forEach(function (wrapperValue) {\n          var value = wrapperValue.value,\n            label = wrapperValue.label;\n          var entity = (newState._valueEntities || prevState._valueEntities)[value];\n          valueLabels[value] = label;\n          if (entity) {\n            keyList.push(entity.key);\n            filteredValueList.push(wrapperValue);\n            return;\n          } // If not match, it may caused by ajax load. We need keep this\n\n          missValueList.push(wrapperValue);\n        }); // We need calculate the value when tree is checked tree\n\n        if (treeCheckable && !treeCheckStrictly) {\n          // Calculate the keys need to be checked\n          var _conductCheck = conductCheck(keyList, true, newState._keyEntities || prevState._keyEntities),\n            checkedKeys = _conductCheck.checkedKeys; // Format value list again for internal usage\n\n          newState._valueList = checkedKeys.map(function (key) {\n            var val = (newState._keyEntities || prevState._keyEntities).get(key).value;\n            var wrappedValue = {\n              value: val\n            };\n            if (valueLabels[val] !== undefined) {\n              wrappedValue.label = valueLabels[val];\n            }\n            return wrappedValue;\n          });\n        } else {\n          newState._valueList = filteredValueList;\n        } // Fill the missValueList, we still need display in the selector\n\n        newState._missValueList = missValueList; // Calculate the value list for `Selector` usage\n\n        newState._selectorValueList = formatSelectorValue(newState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);\n      } // [Legacy] To align with `Select` component,\n      // We use `searchValue` instead of `inputValue` but still keep the api\n      // `inputValue` support `null` to work as `autoClearSearchValue`\n\n      processState('inputValue', function (propValue) {\n        if (propValue !== null) {\n          newState._searchValue = propValue;\n        }\n      }); // Search value\n\n      processState('searchValue', function (propValue) {\n        newState._searchValue = propValue;\n      }); // Do the search logic\n\n      if (newState._searchValue !== undefined || prevState._searchValue && treeNodes) {\n        var searchValue = newState._searchValue !== undefined ? newState._searchValue : prevState._searchValue;\n        var upperSearchValue = String(searchValue).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n        if (filterTreeNode === false) {\n          // Don't filter if is false\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (typeof filterTreeNodeFn !== 'function') {\n          // When is not function (true or undefined), use inner filter\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n        newState._filteredTreeNodes = getFilterTree(newState._treeNodes || prevState._treeNodes, searchValue, filterTreeNodeFn, newState._valueEntities || prevState._valueEntities, SelectNode);\n      } // We should re-calculate the halfCheckedKeys when in search mode\n\n      if (valueRefresh && treeCheckable && !treeCheckStrictly && (newState._searchValue || prevState._searchValue)) {\n        newState._searchHalfCheckedKeys = getHalfCheckedKeys(newState._valueList, newState._valueEntities || prevState._valueEntities);\n      } // Checked Strategy\n\n      processState('showCheckedStrategy', function () {\n        newState._selectorValueList = newState._selectorValueList || formatSelectorValue(newState._valueList || prevState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);\n      });\n      return newState;\n    },\n    // ==================== Selector ====================\n    onSelectorFocus: function onSelectorFocus() {\n      this.setState({\n        _focused: true\n      });\n    },\n    onSelectorBlur: function onSelectorBlur() {\n      this.setState({\n        _focused: false\n      }); // TODO: Close when Popup is also not focused\n      // this.setState({ open: false });\n    },\n    // Handle key board event in both Selector and Popup\n    onComponentKeyDown: function onComponentKeyDown(event) {\n      var open = this.$data._open;\n      var keyCode = event.keyCode;\n      if (!open) {\n        if ([KeyCode.ENTER, KeyCode.DOWN].indexOf(keyCode) !== -1) {\n          this.setOpenState(true);\n        }\n      } else if (KeyCode.ESC === keyCode) {\n        this.setOpenState(false);\n      } else if ([KeyCode.UP, KeyCode.DOWN, KeyCode.LEFT, KeyCode.RIGHT].indexOf(keyCode) !== -1) {\n        // TODO: Handle `open` state\n        event.stopPropagation();\n      }\n    },\n    onDeselect: function onDeselect(wrappedValue, node, nodeEventInfo) {\n      this.__emit('deselect', wrappedValue, node, nodeEventInfo);\n    },\n    onSelectorClear: function onSelectorClear(event) {\n      var disabled = this.$props.disabled;\n      if (disabled) return;\n      this.triggerChange([], []);\n      if (!this.isSearchValueControlled()) {\n        this.setUncontrolledState({\n          _searchValue: '',\n          _filteredTreeNodes: null\n        });\n      }\n      event.stopPropagation();\n    },\n    onMultipleSelectorRemove: function onMultipleSelectorRemove(event, removeValue) {\n      event.stopPropagation();\n      var _this$$data = this.$data,\n        valueList = _this$$data._valueList,\n        missValueList = _this$$data._missValueList,\n        valueEntities = _this$$data._valueEntities;\n      var _this$$props2 = this.$props,\n        treeCheckable = _this$$props2.treeCheckable,\n        treeCheckStrictly = _this$$props2.treeCheckStrictly,\n        treeNodeLabelProp = _this$$props2.treeNodeLabelProp,\n        disabled = _this$$props2.disabled;\n      if (disabled) return; // Find trigger entity\n\n      var triggerEntity = valueEntities[removeValue]; // Clean up value\n\n      var newValueList = valueList;\n      if (triggerEntity) {\n        // If value is in tree\n        if (treeCheckable && !treeCheckStrictly) {\n          newValueList = valueList.filter(function (_ref2) {\n            var value = _ref2.value;\n            var entity = valueEntities[value];\n            return !isPosRelated(entity.pos, triggerEntity.pos);\n          });\n        } else {\n          newValueList = valueList.filter(function (_ref3) {\n            var value = _ref3.value;\n            return value !== removeValue;\n          });\n        }\n      }\n      var triggerNode = triggerEntity ? triggerEntity.node : null;\n      var extraInfo = {\n        triggerValue: removeValue,\n        triggerNode: triggerNode\n      };\n      var deselectInfo = {\n        node: triggerNode\n      }; // [Legacy] Little hack on this to make same action as `onCheck` event.\n\n      if (treeCheckable) {\n        var filteredEntityList = newValueList.map(function (_ref4) {\n          var value = _ref4.value;\n          return valueEntities[value];\n        });\n        deselectInfo.event = 'check';\n        deselectInfo.checked = false;\n        deselectInfo.checkedNodes = filteredEntityList.map(function (_ref5) {\n          var node = _ref5.node;\n          return node;\n        });\n        deselectInfo.checkedNodesPositions = filteredEntityList.map(function (_ref6) {\n          var node = _ref6.node,\n            pos = _ref6.pos;\n          return {\n            node: node,\n            pos: pos\n          };\n        });\n        if (treeCheckStrictly) {\n          extraInfo.allCheckedNodes = deselectInfo.checkedNodes;\n        } else {\n          // TODO: It's too expansive to get `halfCheckedKeys` in onDeselect. Not pass this.\n          extraInfo.allCheckedNodes = flatToHierarchy(filteredEntityList).map(function (_ref7) {\n            var node = _ref7.node;\n            return node;\n          });\n        }\n      } else {\n        deselectInfo.event = 'select';\n        deselectInfo.selected = false;\n        deselectInfo.selectedNodes = newValueList.map(function (_ref8) {\n          var value = _ref8.value;\n          return (valueEntities[value] || {}).node;\n        });\n      } // Some value user pass prop is not in the tree, we also need clean it\n\n      var newMissValueList = missValueList.filter(function (_ref9) {\n        var value = _ref9.value;\n        return value !== removeValue;\n      });\n      var wrappedValue;\n      if (this.isLabelInValue()) {\n        wrappedValue = {\n          label: triggerNode ? getPropsData(triggerNode)[treeNodeLabelProp] : null,\n          value: removeValue\n        };\n      } else {\n        wrappedValue = removeValue;\n      }\n      this.onDeselect(wrappedValue, triggerNode, deselectInfo);\n      this.triggerChange(newMissValueList, newValueList, extraInfo);\n    },\n    // ===================== Popup ======================\n    onValueTrigger: function onValueTrigger(isAdd, nodeList, nodeEventInfo, nodeExtraInfo) {\n      var node = nodeEventInfo.node;\n      var value = node.$props.value;\n      var _this$$data2 = this.$data,\n        missValueList = _this$$data2._missValueList,\n        valueEntities = _this$$data2._valueEntities,\n        keyEntities = _this$$data2._keyEntities,\n        searchValue = _this$$data2._searchValue;\n      var _this$$props3 = this.$props,\n        disabled = _this$$props3.disabled,\n        inputValue = _this$$props3.inputValue,\n        treeNodeLabelProp = _this$$props3.treeNodeLabelProp,\n        treeCheckable = _this$$props3.treeCheckable,\n        treeCheckStrictly = _this$$props3.treeCheckStrictly,\n        autoClearSearchValue = _this$$props3.autoClearSearchValue;\n      var label = node.$props[treeNodeLabelProp];\n      if (disabled) return; // Wrap the return value for user\n\n      var wrappedValue;\n      if (this.isLabelInValue()) {\n        wrappedValue = {\n          value: value,\n          label: label\n        };\n      } else {\n        wrappedValue = value;\n      } // [Legacy] Origin code not trigger `onDeselect` every time. Let's align the behaviour.\n\n      if (isAdd) {\n        this.__emit('select', wrappedValue, node, nodeEventInfo);\n      } else {\n        this.__emit('deselect', wrappedValue, node, nodeEventInfo);\n      } // Get wrapped value list.\n      // This is a bit hack cause we use key to match the value.\n\n      var newValueList = nodeList.map(function (node) {\n        var props = getPropsData(node);\n        return {\n          value: props.value,\n          label: props[treeNodeLabelProp]\n        };\n      }); // When is `treeCheckable` and with `searchValue`, `valueList` is not full filled.\n      // We need calculate the missing nodes.\n\n      if (treeCheckable && !treeCheckStrictly) {\n        var keyList = newValueList.map(function (_ref10) {\n          var val = _ref10.value;\n          return valueEntities[val].key;\n        });\n        if (isAdd) {\n          keyList = conductCheck(keyList, true, keyEntities).checkedKeys;\n        } else {\n          keyList = conductCheck([valueEntities[value].key], false, keyEntities, {\n            checkedKeys: keyList\n          }).checkedKeys;\n        }\n        newValueList = keyList.map(function (key) {\n          var props = getPropsData(keyEntities.get(key).node);\n          return {\n            value: props.value,\n            label: props[treeNodeLabelProp]\n          };\n        });\n      } // Clean up `searchValue` when this prop is set\n\n      if (autoClearSearchValue || inputValue === null) {\n        // Clean state `searchValue` if uncontrolled\n        if (!this.isSearchValueControlled()) {\n          this.setUncontrolledState({\n            _searchValue: '',\n            _filteredTreeNodes: null\n          });\n        } // Trigger onSearch if `searchValue` to be empty.\n        // We should also trigger onSearch with empty string here\n        // since if user use `treeExpandedKeys`, it need user have the ability to reset it.\n\n        if (searchValue && searchValue.length) {\n          this.__emit('search', '');\n        }\n      } // [Legacy] Provide extra info\n\n      var extraInfo = _extends(_extends({}, nodeExtraInfo), {\n        triggerValue: value,\n        triggerNode: node\n      });\n      this.triggerChange(missValueList, newValueList, extraInfo);\n    },\n    onTreeNodeSelect: function onTreeNodeSelect(_, nodeEventInfo) {\n      var _this$$data3 = this.$data,\n        valueList = _this$$data3._valueList,\n        valueEntities = _this$$data3._valueEntities;\n      var _this$$props4 = this.$props,\n        treeCheckable = _this$$props4.treeCheckable,\n        multiple = _this$$props4.multiple;\n      if (treeCheckable) return;\n      if (!multiple) {\n        this.setOpenState(false);\n      }\n      var isAdd = nodeEventInfo.selected;\n      var selectedValue = nodeEventInfo.node.$props.value;\n      var newValueList;\n      if (!multiple) {\n        newValueList = [{\n          value: selectedValue\n        }];\n      } else {\n        newValueList = valueList.filter(function (_ref11) {\n          var value = _ref11.value;\n          return value !== selectedValue;\n        });\n        if (isAdd) {\n          newValueList.push({\n            value: selectedValue\n          });\n        }\n      }\n      var selectedNodes = newValueList.map(function (_ref12) {\n        var value = _ref12.value;\n        return valueEntities[value];\n      }).filter(function (entity) {\n        return entity;\n      }).map(function (_ref13) {\n        var node = _ref13.node;\n        return node;\n      });\n      this.onValueTrigger(isAdd, selectedNodes, nodeEventInfo, {\n        selected: isAdd\n      });\n    },\n    onTreeNodeCheck: function onTreeNodeCheck(_, nodeEventInfo) {\n      var _this$$data4 = this.$data,\n        searchValue = _this$$data4._searchValue,\n        keyEntities = _this$$data4._keyEntities,\n        valueEntities = _this$$data4._valueEntities,\n        valueList = _this$$data4._valueList;\n      var treeCheckStrictly = this.$props.treeCheckStrictly;\n      var checkedNodes = nodeEventInfo.checkedNodes,\n        checkedNodesPositions = nodeEventInfo.checkedNodesPositions;\n      var isAdd = nodeEventInfo.checked;\n      var extraInfo = {\n        checked: isAdd\n      };\n      var checkedNodeList = checkedNodes; // [Legacy] Check event provide `allCheckedNodes`.\n      // When `treeCheckStrictly` or internal `searchValue` is set, TreeNode will be unrelated:\n      // - Related: Show the top checked nodes and has children prop.\n      // - Unrelated: Show all the checked nodes.\n\n      if (searchValue) {\n        var oriKeyList = valueList.map(function (_ref14) {\n          var value = _ref14.value;\n          return valueEntities[value];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (_ref15) {\n          var key = _ref15.key;\n          return key;\n        });\n        var keyList;\n        if (isAdd) {\n          keyList = Array.from(new Set([].concat(_toConsumableArray(oriKeyList), _toConsumableArray(checkedNodeList.map(function (node) {\n            var _getPropsData = getPropsData(node),\n              value = _getPropsData.value;\n            return valueEntities[value].key;\n          })))));\n        } else {\n          keyList = conductCheck([getPropsData(nodeEventInfo.node).eventKey], false, keyEntities, {\n            checkedKeys: oriKeyList\n          }).checkedKeys;\n        }\n        checkedNodeList = keyList.map(function (key) {\n          return keyEntities.get(key).node;\n        }); // Let's follow as not `treeCheckStrictly` format\n\n        extraInfo.allCheckedNodes = keyList.map(function (key) {\n          return cleanEntity(keyEntities.get(key));\n        });\n      } else if (treeCheckStrictly) {\n        extraInfo.allCheckedNodes = nodeEventInfo.checkedNodes;\n      } else {\n        extraInfo.allCheckedNodes = flatToHierarchy(checkedNodesPositions);\n      }\n      this.onValueTrigger(isAdd, checkedNodeList, nodeEventInfo, extraInfo);\n    },\n    // ==================== Trigger =====================\n    onDropdownVisibleChange: function onDropdownVisibleChange(open) {\n      var _this$$props5 = this.$props,\n        multiple = _this$$props5.multiple,\n        treeCheckable = _this$$props5.treeCheckable;\n      var _searchValue = this.$data._searchValue; // When set open success and single mode,\n      // we will reset the input content.\n\n      if (open && !multiple && !treeCheckable && _searchValue) {\n        this.setUncontrolledState({\n          _searchValue: '',\n          _filteredTreeNodes: null\n        });\n      }\n      this.setOpenState(open, true);\n    },\n    onSearchInputChange: function onSearchInputChange(event) {\n      var value = event.target.value;\n      var _this$$data5 = this.$data,\n        treeNodes = _this$$data5._treeNodes,\n        valueEntities = _this$$data5._valueEntities;\n      var _this$$props6 = this.$props,\n        filterTreeNode = _this$$props6.filterTreeNode,\n        treeNodeFilterProp = _this$$props6.treeNodeFilterProp;\n      this.__emit('search', value);\n      var isSet = false;\n      if (!this.isSearchValueControlled()) {\n        isSet = this.setUncontrolledState({\n          _searchValue: value\n        });\n        this.setOpenState(true);\n      }\n      if (isSet) {\n        // Do the search logic\n        var upperSearchValue = String(value).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n        if (filterTreeNode === false) {\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (!filterTreeNodeFn) {\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n        this.setState({\n          _filteredTreeNodes: getFilterTree(treeNodes, value, filterTreeNodeFn, valueEntities, SelectNode)\n        });\n      }\n    },\n    onSearchInputKeyDown: function onSearchInputKeyDown(event) {\n      var _this$$data6 = this.$data,\n        searchValue = _this$$data6._searchValue,\n        valueList = _this$$data6._valueList,\n        valueEntities = _this$$data6._valueEntities;\n      var keyCode = event.keyCode;\n      if (KeyCode.BACKSPACE === keyCode && this.isMultiple() && !searchValue && valueList.length) {\n        var lastValue = valueList[valueList.length - 1].value;\n        var treeCheckStrictly = this.$props.treeCheckStrictly;\n        if (!treeCheckStrictly) {\n          (function () {\n            var cur = valueEntities[lastValue];\n            while (cur) {\n              if (valueList.some(function (j) {\n                return j.value === cur.value;\n              })) {\n                lastValue = cur.value;\n                cur = cur.parent;\n              } else {\n                cur = null;\n              }\n            }\n          })();\n        }\n        this.onMultipleSelectorRemove(event, lastValue);\n      }\n    },\n    onChoiceAnimationLeave: function onChoiceAnimationLeave() {\n      var _this4 = this;\n      requestAnimationFrame(function () {\n        _this4.forcePopupAlign();\n      });\n    },\n    setPopupRef: function setPopupRef(popup) {\n      this.popup = popup;\n    },\n    /**\n     * Only update the value which is not in props\n     */\n    setUncontrolledState: function setUncontrolledState(state) {\n      var needSync = false;\n      var newState = {};\n      var props = getOptionProps(this);\n      Object.keys(state).forEach(function (name) {\n        if (name.slice(1) in props) return;\n        needSync = true;\n        newState[name] = state[name];\n      });\n      if (needSync) {\n        this.setState(newState);\n      }\n      return needSync;\n    },\n    // [Legacy] Origin provide `documentClickClose` which triggered by `Trigger`\n    // Currently `TreeSelect` align the hide popup logic as `Select` which blur to hide.\n    // `documentClickClose` is not accurate anymore. Let's just keep the key word.\n    setOpenState: function setOpenState(open) {\n      var byTrigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var dropdownVisibleChange = this.$props.dropdownVisibleChange;\n      if (dropdownVisibleChange && dropdownVisibleChange(open, {\n        documentClickClose: !open && byTrigger\n      }) === false) {\n        return;\n      }\n      this.setUncontrolledState({\n        _open: open\n      });\n    },\n    // Tree checkable is also a multiple case\n    isMultiple: function isMultiple() {\n      var _this$$props7 = this.$props,\n        multiple = _this$$props7.multiple,\n        treeCheckable = _this$$props7.treeCheckable;\n      return !!(multiple || treeCheckable);\n    },\n    isLabelInValue: function isLabelInValue() {\n      return _isLabelInValue(this.$props);\n    },\n    // [Legacy] To align with `Select` component,\n    // We use `searchValue` instead of `inputValue`\n    // but currently still need support that.\n    // Add this method the check if is controlled\n    isSearchValueControlled: function isSearchValueControlled() {\n      var props = getOptionProps(this);\n      var inputValue = props.inputValue;\n      if ('searchValue' in props) return true;\n      return 'inputValue' in props && inputValue !== null;\n    },\n    forcePopupAlign: function forcePopupAlign() {\n      var $trigger = this.selectTriggerRef.current;\n      if ($trigger) {\n        $trigger.forcePopupAlign();\n      }\n    },\n    delayForcePopupAlign: function delayForcePopupAlign() {\n      var _this5 = this;\n\n      // Wait 2 frame to avoid dom update & dom algin in the same time\n      // https://github.com/ant-design/ant-design/issues/12031\n      requestAnimationFrame(function () {\n        requestAnimationFrame(_this5.forcePopupAlign);\n      });\n    },\n    /**\n     * 1. Update state valueList.\n     * 2. Fire `onChange` event to user.\n     */\n    triggerChange: function triggerChange(missValueList, valueList) {\n      var extraInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _this$$data7 = this.$data,\n        valueEntities = _this$$data7._valueEntities,\n        searchValue = _this$$data7._searchValue,\n        prevSelectorValueList = _this$$data7._selectorValueList;\n      var props = getOptionProps(this);\n      var disabled = props.disabled,\n        treeCheckable = props.treeCheckable,\n        treeCheckStrictly = props.treeCheckStrictly;\n      if (disabled) return; // Trigger\n\n      var extra = _extends({\n        // [Legacy] Always return as array contains label & value\n        preValue: prevSelectorValueList.map(function (_ref16) {\n          var label = _ref16.label,\n            value = _ref16.value;\n          return {\n            label: label,\n            value: value\n          };\n        })\n      }, extraInfo); // Format value by `treeCheckStrictly`\n\n      var selectorValueList = formatSelectorValue(valueList, props, valueEntities);\n      if (!('value' in props)) {\n        var newState = {\n          _missValueList: missValueList,\n          _valueList: valueList,\n          _selectorValueList: selectorValueList\n        };\n        if (searchValue && treeCheckable && !treeCheckStrictly) {\n          newState._searchHalfCheckedKeys = getHalfCheckedKeys(valueList, valueEntities);\n        }\n        this.setState(newState);\n      } // Only do the logic when `onChange` function provided\n\n      if (this.$attrs.onChange) {\n        var connectValueList; // Get value by mode\n\n        if (this.isMultiple()) {\n          connectValueList = [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList));\n        } else {\n          connectValueList = selectorValueList.slice(0, 1);\n        }\n        var labelList = null;\n        var returnValue;\n        if (this.isLabelInValue()) {\n          returnValue = connectValueList.map(function (_ref17) {\n            var label = _ref17.label,\n              value = _ref17.value;\n            return {\n              label: label,\n              value: value\n            };\n          });\n        } else {\n          labelList = [];\n          returnValue = connectValueList.map(function (_ref18) {\n            var label = _ref18.label,\n              value = _ref18.value;\n            labelList.push(label);\n            return value;\n          });\n        }\n        if (!this.isMultiple()) {\n          returnValue = returnValue[0];\n        }\n        this.__emit('change', returnValue, labelList, extra);\n      }\n    },\n    focus: function focus() {\n      this.selectorRef.current.focus();\n    },\n    blur: function blur() {\n      this.selectorRef.current.blur();\n    }\n  },\n  // ===================== Render =====================\n  render: function render() {\n    var _this$$data8 = this.$data,\n      valueList = _this$$data8._valueList,\n      missValueList = _this$$data8._missValueList,\n      selectorValueList = _this$$data8._selectorValueList,\n      searchHalfCheckedKeys = _this$$data8._searchHalfCheckedKeys,\n      valueEntities = _this$$data8._valueEntities,\n      keyEntities = _this$$data8._keyEntities,\n      searchValue = _this$$data8._searchValue,\n      open = _this$$data8._open,\n      focused = _this$$data8._focused,\n      treeNodes = _this$$data8._treeNodes,\n      filteredTreeNodes = _this$$data8._filteredTreeNodes;\n    var props = getOptionProps(this);\n    var prefixCls = props.prefixCls,\n      treeExpandedKeys = props.treeExpandedKeys;\n    var isMultiple = this.isMultiple();\n    var passProps = _extends(_extends(_extends({}, props), this.$attrs), {\n      isMultiple: isMultiple,\n      valueList: valueList,\n      searchHalfCheckedKeys: searchHalfCheckedKeys,\n      selectorValueList: [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList)),\n      valueEntities: valueEntities,\n      keyEntities: keyEntities,\n      searchValue: searchValue,\n      upperSearchValue: (searchValue || '').toUpperCase(),\n      // Perf save\n      open: open,\n      focused: focused,\n      dropdownPrefixCls: \"\".concat(prefixCls, \"-dropdown\"),\n      ariaId: this.ariaId,\n      onChoiceAnimationLeave: this.onChoiceAnimationLeave,\n      vSlots: this.$slots\n    });\n    var popupProps = _extends(_extends({}, passProps), {\n      treeNodes: treeNodes,\n      filteredTreeNodes: filteredTreeNodes,\n      // Tree expanded control\n      treeExpandedKeys: treeExpandedKeys,\n      onTreeExpanded: this.delayForcePopupAlign,\n      ref: this.setPopupRef\n    });\n    var $popup = _createVNode(BasePopup, _objectSpread(_objectSpread({}, popupProps), {}, {\n      \"__propsSymbol__\": []\n    }), null);\n    var Selector = isMultiple ? MultipleSelector : SingleSelector;\n    var $selector = _createVNode(Selector, _objectSpread(_objectSpread({}, passProps), {}, {\n      \"isMultiple\": isMultiple,\n      \"ref\": this.selectorRef\n    }), null);\n    var selectTriggerProps = _extends(_extends({}, passProps), {\n      popupElement: $popup,\n      dropdownVisibleChange: this.onDropdownVisibleChange,\n      ref: this.selectTriggerRef\n    });\n    return _createVNode(SelectTrigger, selectTriggerProps, {\n      default: function _default() {\n        return [$selector];\n      }\n    });\n  }\n});\nSelect.TreeNode = SelectNode;\nSelect.SHOW_ALL = SHOW_ALL;\nSelect.SHOW_PARENT = SHOW_PARENT;\nSelect.SHOW_CHILD = SHOW_CHILD; // Let warning show correct component name\n\nSelect.name = 'TreeSelect';\nexport default Select;","map":{"version":3,"names":["_objectSpread","_toConsumableArray","_extends","createVNode","_createVNode","defineComponent","provide","shallowEqual","scrollIntoView","warning","PropTypes","withUndefined","KeyCode","SelectTrigger","SingleSelector","MultipleSelector","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","BaseMixin","createRef","generateAriaId","formatInternalValue","formatSelectorValue","parseSimpleTreeData","convertDataToTree","convertTreeToEntities","conductCheck","getHalfCheckedKeys","flatToHierarchy","isPosRelated","isLabelInValue","_isLabelInValue","getFilterTree","cleanEntity","findPopupContainer","SelectNode","initDefaultProps","getOptionProps","getPropsData","findDOMNode","BasePopup","getWatch","keys","arguments","length","undefined","watch","forEach","k","needSyncKeys","Select","name","mixins","inheritAttrs","props","prefixCls","string","prefixAria","multiple","looseBool","showArrow","open","value","any","autofocus","defaultOpen","defaultValue","showSearch","placeholder","inputValue","searchValue","autoClearSearchValue","searchPlaceholder","disabled","children","labelInValue","maxTagCount","number","maxTagPlaceholder","maxTagTextLength","showCheckedStrategy","oneOf","dropdownClassName","dropdownStyle","object","dropdownVisibleChange","func","dropdownMatchSelectWidth","treeData","array","treeDataSimpleMode","oneOfType","treeNodeFilterProp","treeNodeLabelProp","treeCheckable","treeCheckStrictly","treeIcon","treeLine","treeDefaultExpandAll","treeDefaultExpandedKeys","treeExpandedKeys","loadData","filterTreeNode","notFoundContent","getPopupContainer","allowClear","transitionName","animation","choiceTransitionName","inputIcon","clearIcon","removeIcon","switcherIcon","__propsSymbol__","data","$props","_this$$props","selectorRef","selectTriggerRef","ariaId","concat","state","_open","_valueList","_searchHalfCheckedKeys","_missValueList","_selectorValueList","_valueEntities","_posEntities","Map","_keyEntities","_searchValue","_prevProps","_init","_focused","_treeNodes","_filteredTreeNodes","newState","getDerivedState","$data","setState","_this","$nextTick","forcePopupAlign","_this2","isSearchValueControlled","_this2$$data","selectorValueList","valueEntities","isMultiple","popup","_this2$popup$getTree","getTree","domTreeNodes","_ref","key","treeNode","domNode","requestAnimationFrame","popupNode","triggerContainer","onlyScrollIfNeeded","offsetTop","created","onSelectorFocus","onSelectorBlur","onSelectorKeyDown","onComponentKeyDown","onSelectorClear","onMultipleSelectorRemove","onTreeNodeSelect","onTreeNodeCheck","onPopupKeyDown","onSearchInputChange","onSearchInputKeyDown","mounted","_this3","_this3$$props","focus","methods","nextProps","prevState","_prevState$_prevProps","prevProps","self","processState","propName","updater","valueRefresh","propValue","treeNodes","treeDataChanged","treeDataModeChanged","prevValue","prev","simpleMapper","id","pId","rootPId","entitiesMap","posEntities","keyEntities","missValueList","filteredValueList","keyList","latestValueList","valueLabels","wrapperValue","label","entity","push","_conductCheck","checkedKeys","map","val","get","wrappedValue","upperSearchValue","String","toUpperCase","filterTreeNodeFn","_","node","nodeValue","indexOf","event","keyCode","ENTER","DOWN","setOpenState","ESC","UP","LEFT","RIGHT","stopPropagation","onDeselect","nodeEventInfo","__emit","triggerChange","setUncontrolledState","removeValue","_this$$data","valueList","_this$$props2","triggerEntity","newValueList","filter","_ref2","pos","_ref3","triggerNode","extraInfo","triggerValue","deselectInfo","filteredEntityList","_ref4","checked","checkedNodes","_ref5","checkedNodesPositions","_ref6","allCheckedNodes","_ref7","selected","selectedNodes","_ref8","newMissValueList","_ref9","onValueTrigger","isAdd","nodeList","nodeExtraInfo","_this$$data2","_this$$props3","_ref10","_this$$data3","_this$$props4","selectedValue","_ref11","_ref12","_ref13","_this$$data4","checkedNodeList","oriKeyList","_ref14","_ref15","Array","from","Set","_getPropsData","eventKey","onDropdownVisibleChange","_this$$props5","target","_this$$data5","_this$$props6","isSet","_this$$data6","BACKSPACE","lastValue","cur","some","j","parent","onChoiceAnimationLeave","_this4","setPopupRef","needSync","Object","slice","byTrigger","documentClickClose","_this$$props7","$trigger","current","delayForcePopupAlign","_this5","_this$$data7","prevSelectorValueList","extra","preValue","_ref16","$attrs","onChange","connectValueList","labelList","returnValue","_ref17","_ref18","blur","render","_this$$data8","searchHalfCheckedKeys","focused","filteredTreeNodes","passProps","dropdownPrefixCls","vSlots","$slots","popupProps","onTreeExpanded","ref","$popup","Selector","$selector","selectTriggerProps","popupElement","default","_default","TreeNode"],"sources":["/Users/lyonxie/Desktop/test/node_modules/ant-design-vue/es/vc-tree-select/src/Select.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\n\n/**\n * ARIA: https://www.w3.org/TR/wai-aria/#combobox\n * Sample 1: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/combobox/aria1.1pattern/listbox-combo.html\n * Sample 2: https://www.w3.org/blog/wai-components-gallery/widget/combobox-with-aria-autocompleteinline/\n *\n * Tab logic:\n * Popup is close\n * 1. Focus input (mark component as focused)\n * 2. Press enter to show the popup\n * 3. If popup has input, focus it\n *\n * Popup is open\n * 1. press tab to close the popup\n * 2. Focus back to the selection input box\n * 3. Let the native tab going on\n *\n * TreeSelect use 2 design type.\n * In single mode, we should focus on the `span`\n * In multiple mode, we should focus on the `input`\n */\nimport { defineComponent, provide } from 'vue';\nimport shallowEqual from '../../_util/shallowequal';\nimport scrollIntoView from 'dom-scroll-into-view';\nimport warning from 'warning';\nimport PropTypes, { withUndefined } from '../../_util/vue-types';\nimport KeyCode from '../../_util/KeyCode';\nimport SelectTrigger from './SelectTrigger';\nimport SingleSelector from './Selector/SingleSelector';\nimport MultipleSelector from './Selector/MultipleSelector';\nimport { SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './strategies';\nimport BaseMixin from '../../_util/BaseMixin';\nimport { createRef, generateAriaId, formatInternalValue, formatSelectorValue, parseSimpleTreeData, convertDataToTree, convertTreeToEntities, conductCheck, getHalfCheckedKeys, flatToHierarchy, isPosRelated, isLabelInValue as _isLabelInValue, getFilterTree, cleanEntity, findPopupContainer } from './util';\nimport SelectNode from './SelectNode';\nimport { initDefaultProps, getOptionProps, getPropsData, findDOMNode } from '../../_util/props-util';\nimport BasePopup from './Popup/MultiplePopup';\n\nfunction getWatch() {\n  var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var watch = {};\n  keys.forEach(function (k) {\n    watch[k] = function () {\n      this.needSyncKeys[k] = true;\n    };\n  });\n  return watch;\n}\n\nvar Select = defineComponent({\n  name: 'Select',\n  mixins: [BaseMixin],\n  inheritAttrs: false,\n  props: initDefaultProps({\n    prefixCls: PropTypes.string,\n    prefixAria: PropTypes.string,\n    multiple: PropTypes.looseBool,\n    showArrow: PropTypes.looseBool,\n    open: PropTypes.looseBool,\n    value: PropTypes.any,\n    autofocus: PropTypes.looseBool,\n    defaultOpen: PropTypes.looseBool,\n    defaultValue: PropTypes.any,\n    showSearch: PropTypes.looseBool,\n    placeholder: PropTypes.any,\n    inputValue: PropTypes.string,\n    searchValue: PropTypes.string,\n    autoClearSearchValue: PropTypes.looseBool,\n    searchPlaceholder: PropTypes.any,\n    disabled: PropTypes.looseBool,\n    children: PropTypes.any,\n    labelInValue: PropTypes.looseBool,\n    maxTagCount: PropTypes.number,\n    maxTagPlaceholder: PropTypes.any,\n    maxTagTextLength: PropTypes.number,\n    showCheckedStrategy: PropTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),\n    dropdownClassName: PropTypes.string,\n    dropdownStyle: PropTypes.object,\n    dropdownVisibleChange: PropTypes.func,\n    dropdownMatchSelectWidth: PropTypes.looseBool,\n    treeData: PropTypes.array,\n    treeDataSimpleMode: withUndefined(PropTypes.oneOfType([PropTypes.looseBool, PropTypes.object])),\n    treeNodeFilterProp: PropTypes.string,\n    treeNodeLabelProp: PropTypes.string,\n    treeCheckable: PropTypes.any,\n    // treeCheckable: PropTypes.any,\n    treeCheckStrictly: PropTypes.looseBool,\n    treeIcon: PropTypes.looseBool,\n    treeLine: PropTypes.looseBool,\n    treeDefaultExpandAll: PropTypes.looseBool,\n    treeDefaultExpandedKeys: PropTypes.array,\n    treeExpandedKeys: PropTypes.array,\n    loadData: PropTypes.func,\n    filterTreeNode: withUndefined(PropTypes.oneOfType([PropTypes.func, PropTypes.looseBool])),\n    notFoundContent: PropTypes.any,\n    getPopupContainer: PropTypes.func,\n    // onSearch: PropTypes.func,\n    // onSelect: PropTypes.func,\n    // onDeselect: PropTypes.func,\n    // onChange: PropTypes.func,\n    // onDropdownVisibleChange: PropTypes.func,\n    // onTreeExpand: PropTypes.func,\n    allowClear: PropTypes.looseBool,\n    transitionName: PropTypes.string,\n    animation: PropTypes.string,\n    choiceTransitionName: PropTypes.string,\n    inputIcon: PropTypes.any,\n    clearIcon: PropTypes.any,\n    removeIcon: PropTypes.any,\n    switcherIcon: PropTypes.any,\n    __propsSymbol__: PropTypes.any\n  }, {\n    prefixCls: 'rc-tree-select',\n    prefixAria: 'rc-tree-select',\n    showArrow: true,\n    showSearch: true,\n    autoClearSearchValue: true,\n    showCheckedStrategy: SHOW_CHILD,\n    // dropdownMatchSelectWidth change the origin design, set to false now\n    // ref: https://github.com/react-component/select/blob/4cad95e098a341a09de239ad6981067188842020/src/Select.jsx#L344\n    // ref: https://github.com/react-component/select/pull/71\n    treeNodeFilterProp: 'value',\n    treeNodeLabelProp: 'title',\n    treeIcon: false,\n    notFoundContent: 'Not Found',\n    dropdownStyle: {},\n    dropdownVisibleChange: function dropdownVisibleChange() {\n      return true;\n    }\n  }),\n  data: function data() {\n    warning(this.$props.__propsSymbol__, 'must pass __propsSymbol__');\n    var _this$$props = this.$props,\n        prefixAria = _this$$props.prefixAria,\n        defaultOpen = _this$$props.defaultOpen,\n        open = _this$$props.open;\n    this.needSyncKeys = {};\n    this.selectorRef = createRef();\n    this.selectTriggerRef = createRef(); // ARIA need `aria-controls` props mapping\n    // Since this need user input. Let's generate ourselves\n\n    this.ariaId = generateAriaId(\"\".concat(prefixAria, \"-list\"));\n    var state = {\n      _open: open || defaultOpen,\n      _valueList: [],\n      _searchHalfCheckedKeys: [],\n      _missValueList: [],\n      _selectorValueList: [],\n      _valueEntities: {},\n      _posEntities: new Map(),\n      _keyEntities: new Map(),\n      _searchValue: '',\n      _prevProps: {},\n      _init: true,\n      _focused: undefined,\n      _treeNodes: undefined,\n      _filteredTreeNodes: undefined\n    };\n    var newState = this.getDerivedState(this.$props, state);\n    return _extends(_extends({}, state), newState);\n  },\n  watch: _extends(_extends({}, getWatch(['treeData', 'defaultValue', 'value'])), {\n    __propsSymbol__: function __propsSymbol__() {\n      var state = this.getDerivedState(this.$props, this.$data);\n      this.setState(state);\n      this.needSyncKeys = {};\n    },\n    _valueList: function _valueList() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.forcePopupAlign();\n      });\n    },\n    _open: function _open(open) {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        if (!open && !_this2.isSearchValueControlled()) {\n          _this2.setState({\n            _searchValue: ''\n          });\n        }\n\n        if (open && !_this2.$data._searchValue) {\n          _this2.setState({\n            _filteredTreeNodes: null\n          });\n        }\n\n        var prefixCls = _this2.$props.prefixCls;\n        var _this2$$data = _this2.$data,\n            selectorValueList = _this2$$data._selectorValueList,\n            valueEntities = _this2$$data._valueEntities;\n\n        var isMultiple = _this2.isMultiple(); // Scroll to value position, only need sync on single mode\n\n\n        if (!isMultiple && selectorValueList.length && open && _this2.popup) {\n          var value = selectorValueList[0].value;\n\n          var _this2$popup$getTree = _this2.popup.getTree(),\n              domTreeNodes = _this2$popup$getTree.domTreeNodes;\n\n          var _ref = valueEntities[value] || {},\n              key = _ref.key;\n\n          var treeNode = domTreeNodes[key];\n\n          if (treeNode) {\n            var domNode = findDOMNode(treeNode);\n            requestAnimationFrame(function () {\n              var popupNode = findDOMNode(_this2.popup);\n              var triggerContainer = findPopupContainer(popupNode, \"\".concat(prefixCls, \"-dropdown\"));\n\n              if (domNode && triggerContainer) {\n                scrollIntoView(domNode, triggerContainer, {\n                  onlyScrollIfNeeded: true,\n                  offsetTop: 0\n                });\n              }\n            });\n          }\n        }\n      });\n    }\n  }),\n  created: function created() {\n    provide('vcTreeSelect', {\n      onSelectorFocus: this.onSelectorFocus,\n      onSelectorBlur: this.onSelectorBlur,\n      onSelectorKeyDown: this.onComponentKeyDown,\n      onSelectorClear: this.onSelectorClear,\n      onMultipleSelectorRemove: this.onMultipleSelectorRemove,\n      onTreeNodeSelect: this.onTreeNodeSelect,\n      onTreeNodeCheck: this.onTreeNodeCheck,\n      onPopupKeyDown: this.onComponentKeyDown,\n      onSearchInputChange: this.onSearchInputChange,\n      onSearchInputKeyDown: this.onSearchInputKeyDown\n    });\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    this.$nextTick(function () {\n      var _this3$$props = _this3.$props,\n          autofocus = _this3$$props.autofocus,\n          disabled = _this3$$props.disabled;\n\n      if (autofocus && !disabled) {\n        _this3.focus();\n      }\n    });\n  },\n  methods: {\n    getDerivedState: function getDerivedState(nextProps, prevState) {\n      var _prevState$_prevProps = prevState._prevProps,\n          prevProps = _prevState$_prevProps === void 0 ? {} : _prevState$_prevProps;\n      var treeCheckable = nextProps.treeCheckable,\n          treeCheckStrictly = nextProps.treeCheckStrictly,\n          filterTreeNode = nextProps.filterTreeNode,\n          treeNodeFilterProp = nextProps.treeNodeFilterProp,\n          treeDataSimpleMode = nextProps.treeDataSimpleMode;\n      var newState = {\n        _prevProps: _extends({}, nextProps),\n        _init: false\n      };\n      var self = this; // Process the state when props updated\n\n      function processState(propName, updater) {\n        if (prevProps[propName] !== nextProps[propName] || self.needSyncKeys[propName]) {\n          updater(nextProps[propName], prevProps[propName]);\n          return true;\n        }\n\n        return false;\n      }\n\n      var valueRefresh = false; // Open\n\n      processState('open', function (propValue) {\n        newState._open = propValue;\n      }); // Tree Nodes\n\n      var treeNodes;\n      var treeDataChanged = false;\n      var treeDataModeChanged = false;\n      processState('treeData', function (propValue) {\n        treeNodes = convertDataToTree(propValue);\n        treeDataChanged = true;\n      });\n      processState('treeDataSimpleMode', function (propValue, prevValue) {\n        if (!propValue) return;\n        var prev = !prevValue || prevValue === true ? {} : prevValue; // Shallow equal to avoid dynamic prop object\n\n        if (!shallowEqual(propValue, prev)) {\n          treeDataModeChanged = true;\n        }\n      }); // Parse by `treeDataSimpleMode`\n\n      if (treeDataSimpleMode && (treeDataChanged || treeDataModeChanged)) {\n        var simpleMapper = _extends({\n          id: 'id',\n          pId: 'pId',\n          rootPId: null\n        }, treeDataSimpleMode !== true ? treeDataSimpleMode : {});\n\n        treeNodes = convertDataToTree(parseSimpleTreeData(nextProps.treeData, simpleMapper));\n      } // If `treeData` not provide, use children TreeNodes\n\n\n      if (!nextProps.treeData) {\n        // processState('children', (propValue) => {\n        //   treeNodes = Array.isArray(propValue) ? propValue : [propValue]\n        // })\n        treeNodes = this.children || [];\n      } // Convert `treeData` to entities\n\n\n      if (treeNodes) {\n        var entitiesMap = convertTreeToEntities(treeNodes);\n        newState._treeNodes = treeNodes;\n        newState._posEntities = entitiesMap.posEntities;\n        newState._valueEntities = entitiesMap.valueEntities;\n        newState._keyEntities = entitiesMap.keyEntities;\n        valueRefresh = true;\n      } // Value List\n\n\n      if (prevState._init) {\n        processState('defaultValue', function (propValue) {\n          newState._valueList = formatInternalValue(propValue, nextProps);\n          valueRefresh = true;\n        });\n      }\n\n      processState('value', function (propValue) {\n        newState._valueList = formatInternalValue(propValue, nextProps);\n        valueRefresh = true;\n      }); // Selector Value List\n\n      if (valueRefresh) {\n        // Find out that value not exist in the tree\n        var missValueList = [];\n        var filteredValueList = [];\n        var keyList = []; // Get latest value list\n\n        var latestValueList = newState._valueList;\n\n        if (!latestValueList) {\n          // Also need add prev missValueList to avoid new treeNodes contains the value\n          latestValueList = [].concat(_toConsumableArray(prevState._valueList), _toConsumableArray(prevState._missValueList));\n        } // Get key by value\n\n\n        var valueLabels = {};\n        latestValueList.forEach(function (wrapperValue) {\n          var value = wrapperValue.value,\n              label = wrapperValue.label;\n          var entity = (newState._valueEntities || prevState._valueEntities)[value];\n          valueLabels[value] = label;\n\n          if (entity) {\n            keyList.push(entity.key);\n            filteredValueList.push(wrapperValue);\n            return;\n          } // If not match, it may caused by ajax load. We need keep this\n\n\n          missValueList.push(wrapperValue);\n        }); // We need calculate the value when tree is checked tree\n\n        if (treeCheckable && !treeCheckStrictly) {\n          // Calculate the keys need to be checked\n          var _conductCheck = conductCheck(keyList, true, newState._keyEntities || prevState._keyEntities),\n              checkedKeys = _conductCheck.checkedKeys; // Format value list again for internal usage\n\n\n          newState._valueList = checkedKeys.map(function (key) {\n            var val = (newState._keyEntities || prevState._keyEntities).get(key).value;\n\n            var wrappedValue = {\n              value: val\n            };\n\n            if (valueLabels[val] !== undefined) {\n              wrappedValue.label = valueLabels[val];\n            }\n\n            return wrappedValue;\n          });\n        } else {\n          newState._valueList = filteredValueList;\n        } // Fill the missValueList, we still need display in the selector\n\n\n        newState._missValueList = missValueList; // Calculate the value list for `Selector` usage\n\n        newState._selectorValueList = formatSelectorValue(newState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);\n      } // [Legacy] To align with `Select` component,\n      // We use `searchValue` instead of `inputValue` but still keep the api\n      // `inputValue` support `null` to work as `autoClearSearchValue`\n\n\n      processState('inputValue', function (propValue) {\n        if (propValue !== null) {\n          newState._searchValue = propValue;\n        }\n      }); // Search value\n\n      processState('searchValue', function (propValue) {\n        newState._searchValue = propValue;\n      }); // Do the search logic\n\n      if (newState._searchValue !== undefined || prevState._searchValue && treeNodes) {\n        var searchValue = newState._searchValue !== undefined ? newState._searchValue : prevState._searchValue;\n        var upperSearchValue = String(searchValue).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n\n        if (filterTreeNode === false) {\n          // Don't filter if is false\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (typeof filterTreeNodeFn !== 'function') {\n          // When is not function (true or undefined), use inner filter\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        newState._filteredTreeNodes = getFilterTree(newState._treeNodes || prevState._treeNodes, searchValue, filterTreeNodeFn, newState._valueEntities || prevState._valueEntities, SelectNode);\n      } // We should re-calculate the halfCheckedKeys when in search mode\n\n\n      if (valueRefresh && treeCheckable && !treeCheckStrictly && (newState._searchValue || prevState._searchValue)) {\n        newState._searchHalfCheckedKeys = getHalfCheckedKeys(newState._valueList, newState._valueEntities || prevState._valueEntities);\n      } // Checked Strategy\n\n\n      processState('showCheckedStrategy', function () {\n        newState._selectorValueList = newState._selectorValueList || formatSelectorValue(newState._valueList || prevState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);\n      });\n      return newState;\n    },\n    // ==================== Selector ====================\n    onSelectorFocus: function onSelectorFocus() {\n      this.setState({\n        _focused: true\n      });\n    },\n    onSelectorBlur: function onSelectorBlur() {\n      this.setState({\n        _focused: false\n      }); // TODO: Close when Popup is also not focused\n      // this.setState({ open: false });\n    },\n    // Handle key board event in both Selector and Popup\n    onComponentKeyDown: function onComponentKeyDown(event) {\n      var open = this.$data._open;\n      var keyCode = event.keyCode;\n\n      if (!open) {\n        if ([KeyCode.ENTER, KeyCode.DOWN].indexOf(keyCode) !== -1) {\n          this.setOpenState(true);\n        }\n      } else if (KeyCode.ESC === keyCode) {\n        this.setOpenState(false);\n      } else if ([KeyCode.UP, KeyCode.DOWN, KeyCode.LEFT, KeyCode.RIGHT].indexOf(keyCode) !== -1) {\n        // TODO: Handle `open` state\n        event.stopPropagation();\n      }\n    },\n    onDeselect: function onDeselect(wrappedValue, node, nodeEventInfo) {\n      this.__emit('deselect', wrappedValue, node, nodeEventInfo);\n    },\n    onSelectorClear: function onSelectorClear(event) {\n      var disabled = this.$props.disabled;\n      if (disabled) return;\n      this.triggerChange([], []);\n\n      if (!this.isSearchValueControlled()) {\n        this.setUncontrolledState({\n          _searchValue: '',\n          _filteredTreeNodes: null\n        });\n      }\n\n      event.stopPropagation();\n    },\n    onMultipleSelectorRemove: function onMultipleSelectorRemove(event, removeValue) {\n      event.stopPropagation();\n      var _this$$data = this.$data,\n          valueList = _this$$data._valueList,\n          missValueList = _this$$data._missValueList,\n          valueEntities = _this$$data._valueEntities;\n      var _this$$props2 = this.$props,\n          treeCheckable = _this$$props2.treeCheckable,\n          treeCheckStrictly = _this$$props2.treeCheckStrictly,\n          treeNodeLabelProp = _this$$props2.treeNodeLabelProp,\n          disabled = _this$$props2.disabled;\n      if (disabled) return; // Find trigger entity\n\n      var triggerEntity = valueEntities[removeValue]; // Clean up value\n\n      var newValueList = valueList;\n\n      if (triggerEntity) {\n        // If value is in tree\n        if (treeCheckable && !treeCheckStrictly) {\n          newValueList = valueList.filter(function (_ref2) {\n            var value = _ref2.value;\n            var entity = valueEntities[value];\n            return !isPosRelated(entity.pos, triggerEntity.pos);\n          });\n        } else {\n          newValueList = valueList.filter(function (_ref3) {\n            var value = _ref3.value;\n            return value !== removeValue;\n          });\n        }\n      }\n\n      var triggerNode = triggerEntity ? triggerEntity.node : null;\n      var extraInfo = {\n        triggerValue: removeValue,\n        triggerNode: triggerNode\n      };\n      var deselectInfo = {\n        node: triggerNode\n      }; // [Legacy] Little hack on this to make same action as `onCheck` event.\n\n      if (treeCheckable) {\n        var filteredEntityList = newValueList.map(function (_ref4) {\n          var value = _ref4.value;\n          return valueEntities[value];\n        });\n        deselectInfo.event = 'check';\n        deselectInfo.checked = false;\n        deselectInfo.checkedNodes = filteredEntityList.map(function (_ref5) {\n          var node = _ref5.node;\n          return node;\n        });\n        deselectInfo.checkedNodesPositions = filteredEntityList.map(function (_ref6) {\n          var node = _ref6.node,\n              pos = _ref6.pos;\n          return {\n            node: node,\n            pos: pos\n          };\n        });\n\n        if (treeCheckStrictly) {\n          extraInfo.allCheckedNodes = deselectInfo.checkedNodes;\n        } else {\n          // TODO: It's too expansive to get `halfCheckedKeys` in onDeselect. Not pass this.\n          extraInfo.allCheckedNodes = flatToHierarchy(filteredEntityList).map(function (_ref7) {\n            var node = _ref7.node;\n            return node;\n          });\n        }\n      } else {\n        deselectInfo.event = 'select';\n        deselectInfo.selected = false;\n        deselectInfo.selectedNodes = newValueList.map(function (_ref8) {\n          var value = _ref8.value;\n          return (valueEntities[value] || {}).node;\n        });\n      } // Some value user pass prop is not in the tree, we also need clean it\n\n\n      var newMissValueList = missValueList.filter(function (_ref9) {\n        var value = _ref9.value;\n        return value !== removeValue;\n      });\n      var wrappedValue;\n\n      if (this.isLabelInValue()) {\n        wrappedValue = {\n          label: triggerNode ? getPropsData(triggerNode)[treeNodeLabelProp] : null,\n          value: removeValue\n        };\n      } else {\n        wrappedValue = removeValue;\n      }\n\n      this.onDeselect(wrappedValue, triggerNode, deselectInfo);\n      this.triggerChange(newMissValueList, newValueList, extraInfo);\n    },\n    // ===================== Popup ======================\n    onValueTrigger: function onValueTrigger(isAdd, nodeList, nodeEventInfo, nodeExtraInfo) {\n      var node = nodeEventInfo.node;\n      var value = node.$props.value;\n      var _this$$data2 = this.$data,\n          missValueList = _this$$data2._missValueList,\n          valueEntities = _this$$data2._valueEntities,\n          keyEntities = _this$$data2._keyEntities,\n          searchValue = _this$$data2._searchValue;\n      var _this$$props3 = this.$props,\n          disabled = _this$$props3.disabled,\n          inputValue = _this$$props3.inputValue,\n          treeNodeLabelProp = _this$$props3.treeNodeLabelProp,\n          treeCheckable = _this$$props3.treeCheckable,\n          treeCheckStrictly = _this$$props3.treeCheckStrictly,\n          autoClearSearchValue = _this$$props3.autoClearSearchValue;\n      var label = node.$props[treeNodeLabelProp];\n      if (disabled) return; // Wrap the return value for user\n\n      var wrappedValue;\n\n      if (this.isLabelInValue()) {\n        wrappedValue = {\n          value: value,\n          label: label\n        };\n      } else {\n        wrappedValue = value;\n      } // [Legacy] Origin code not trigger `onDeselect` every time. Let's align the behaviour.\n\n\n      if (isAdd) {\n        this.__emit('select', wrappedValue, node, nodeEventInfo);\n      } else {\n        this.__emit('deselect', wrappedValue, node, nodeEventInfo);\n      } // Get wrapped value list.\n      // This is a bit hack cause we use key to match the value.\n\n\n      var newValueList = nodeList.map(function (node) {\n        var props = getPropsData(node);\n        return {\n          value: props.value,\n          label: props[treeNodeLabelProp]\n        };\n      }); // When is `treeCheckable` and with `searchValue`, `valueList` is not full filled.\n      // We need calculate the missing nodes.\n\n      if (treeCheckable && !treeCheckStrictly) {\n        var keyList = newValueList.map(function (_ref10) {\n          var val = _ref10.value;\n          return valueEntities[val].key;\n        });\n\n        if (isAdd) {\n          keyList = conductCheck(keyList, true, keyEntities).checkedKeys;\n        } else {\n          keyList = conductCheck([valueEntities[value].key], false, keyEntities, {\n            checkedKeys: keyList\n          }).checkedKeys;\n        }\n\n        newValueList = keyList.map(function (key) {\n          var props = getPropsData(keyEntities.get(key).node);\n          return {\n            value: props.value,\n            label: props[treeNodeLabelProp]\n          };\n        });\n      } // Clean up `searchValue` when this prop is set\n\n\n      if (autoClearSearchValue || inputValue === null) {\n        // Clean state `searchValue` if uncontrolled\n        if (!this.isSearchValueControlled()) {\n          this.setUncontrolledState({\n            _searchValue: '',\n            _filteredTreeNodes: null\n          });\n        } // Trigger onSearch if `searchValue` to be empty.\n        // We should also trigger onSearch with empty string here\n        // since if user use `treeExpandedKeys`, it need user have the ability to reset it.\n\n\n        if (searchValue && searchValue.length) {\n          this.__emit('search', '');\n        }\n      } // [Legacy] Provide extra info\n\n\n      var extraInfo = _extends(_extends({}, nodeExtraInfo), {\n        triggerValue: value,\n        triggerNode: node\n      });\n\n      this.triggerChange(missValueList, newValueList, extraInfo);\n    },\n    onTreeNodeSelect: function onTreeNodeSelect(_, nodeEventInfo) {\n      var _this$$data3 = this.$data,\n          valueList = _this$$data3._valueList,\n          valueEntities = _this$$data3._valueEntities;\n      var _this$$props4 = this.$props,\n          treeCheckable = _this$$props4.treeCheckable,\n          multiple = _this$$props4.multiple;\n      if (treeCheckable) return;\n\n      if (!multiple) {\n        this.setOpenState(false);\n      }\n\n      var isAdd = nodeEventInfo.selected;\n      var selectedValue = nodeEventInfo.node.$props.value;\n      var newValueList;\n\n      if (!multiple) {\n        newValueList = [{\n          value: selectedValue\n        }];\n      } else {\n        newValueList = valueList.filter(function (_ref11) {\n          var value = _ref11.value;\n          return value !== selectedValue;\n        });\n\n        if (isAdd) {\n          newValueList.push({\n            value: selectedValue\n          });\n        }\n      }\n\n      var selectedNodes = newValueList.map(function (_ref12) {\n        var value = _ref12.value;\n        return valueEntities[value];\n      }).filter(function (entity) {\n        return entity;\n      }).map(function (_ref13) {\n        var node = _ref13.node;\n        return node;\n      });\n      this.onValueTrigger(isAdd, selectedNodes, nodeEventInfo, {\n        selected: isAdd\n      });\n    },\n    onTreeNodeCheck: function onTreeNodeCheck(_, nodeEventInfo) {\n      var _this$$data4 = this.$data,\n          searchValue = _this$$data4._searchValue,\n          keyEntities = _this$$data4._keyEntities,\n          valueEntities = _this$$data4._valueEntities,\n          valueList = _this$$data4._valueList;\n      var treeCheckStrictly = this.$props.treeCheckStrictly;\n      var checkedNodes = nodeEventInfo.checkedNodes,\n          checkedNodesPositions = nodeEventInfo.checkedNodesPositions;\n      var isAdd = nodeEventInfo.checked;\n      var extraInfo = {\n        checked: isAdd\n      };\n      var checkedNodeList = checkedNodes; // [Legacy] Check event provide `allCheckedNodes`.\n      // When `treeCheckStrictly` or internal `searchValue` is set, TreeNode will be unrelated:\n      // - Related: Show the top checked nodes and has children prop.\n      // - Unrelated: Show all the checked nodes.\n\n      if (searchValue) {\n        var oriKeyList = valueList.map(function (_ref14) {\n          var value = _ref14.value;\n          return valueEntities[value];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (_ref15) {\n          var key = _ref15.key;\n          return key;\n        });\n        var keyList;\n\n        if (isAdd) {\n          keyList = Array.from(new Set([].concat(_toConsumableArray(oriKeyList), _toConsumableArray(checkedNodeList.map(function (node) {\n            var _getPropsData = getPropsData(node),\n                value = _getPropsData.value;\n\n            return valueEntities[value].key;\n          })))));\n        } else {\n          keyList = conductCheck([getPropsData(nodeEventInfo.node).eventKey], false, keyEntities, {\n            checkedKeys: oriKeyList\n          }).checkedKeys;\n        }\n\n        checkedNodeList = keyList.map(function (key) {\n          return keyEntities.get(key).node;\n        }); // Let's follow as not `treeCheckStrictly` format\n\n        extraInfo.allCheckedNodes = keyList.map(function (key) {\n          return cleanEntity(keyEntities.get(key));\n        });\n      } else if (treeCheckStrictly) {\n        extraInfo.allCheckedNodes = nodeEventInfo.checkedNodes;\n      } else {\n        extraInfo.allCheckedNodes = flatToHierarchy(checkedNodesPositions);\n      }\n\n      this.onValueTrigger(isAdd, checkedNodeList, nodeEventInfo, extraInfo);\n    },\n    // ==================== Trigger =====================\n    onDropdownVisibleChange: function onDropdownVisibleChange(open) {\n      var _this$$props5 = this.$props,\n          multiple = _this$$props5.multiple,\n          treeCheckable = _this$$props5.treeCheckable;\n      var _searchValue = this.$data._searchValue; // When set open success and single mode,\n      // we will reset the input content.\n\n      if (open && !multiple && !treeCheckable && _searchValue) {\n        this.setUncontrolledState({\n          _searchValue: '',\n          _filteredTreeNodes: null\n        });\n      }\n\n      this.setOpenState(open, true);\n    },\n    onSearchInputChange: function onSearchInputChange(event) {\n      var value = event.target.value;\n      var _this$$data5 = this.$data,\n          treeNodes = _this$$data5._treeNodes,\n          valueEntities = _this$$data5._valueEntities;\n      var _this$$props6 = this.$props,\n          filterTreeNode = _this$$props6.filterTreeNode,\n          treeNodeFilterProp = _this$$props6.treeNodeFilterProp;\n\n      this.__emit('search', value);\n\n      var isSet = false;\n\n      if (!this.isSearchValueControlled()) {\n        isSet = this.setUncontrolledState({\n          _searchValue: value\n        });\n        this.setOpenState(true);\n      }\n\n      if (isSet) {\n        // Do the search logic\n        var upperSearchValue = String(value).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n\n        if (filterTreeNode === false) {\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (!filterTreeNodeFn) {\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        this.setState({\n          _filteredTreeNodes: getFilterTree(treeNodes, value, filterTreeNodeFn, valueEntities, SelectNode)\n        });\n      }\n    },\n    onSearchInputKeyDown: function onSearchInputKeyDown(event) {\n      var _this$$data6 = this.$data,\n          searchValue = _this$$data6._searchValue,\n          valueList = _this$$data6._valueList,\n          valueEntities = _this$$data6._valueEntities;\n      var keyCode = event.keyCode;\n\n      if (KeyCode.BACKSPACE === keyCode && this.isMultiple() && !searchValue && valueList.length) {\n        var lastValue = valueList[valueList.length - 1].value;\n        var treeCheckStrictly = this.$props.treeCheckStrictly;\n\n        if (!treeCheckStrictly) {\n          (function () {\n            var cur = valueEntities[lastValue];\n\n            while (cur) {\n              if (valueList.some(function (j) {\n                return j.value === cur.value;\n              })) {\n                lastValue = cur.value;\n                cur = cur.parent;\n              } else {\n                cur = null;\n              }\n            }\n          })();\n        }\n\n        this.onMultipleSelectorRemove(event, lastValue);\n      }\n    },\n    onChoiceAnimationLeave: function onChoiceAnimationLeave() {\n      var _this4 = this;\n\n      requestAnimationFrame(function () {\n        _this4.forcePopupAlign();\n      });\n    },\n    setPopupRef: function setPopupRef(popup) {\n      this.popup = popup;\n    },\n\n    /**\n     * Only update the value which is not in props\n     */\n    setUncontrolledState: function setUncontrolledState(state) {\n      var needSync = false;\n      var newState = {};\n      var props = getOptionProps(this);\n      Object.keys(state).forEach(function (name) {\n        if (name.slice(1) in props) return;\n        needSync = true;\n        newState[name] = state[name];\n      });\n\n      if (needSync) {\n        this.setState(newState);\n      }\n\n      return needSync;\n    },\n    // [Legacy] Origin provide `documentClickClose` which triggered by `Trigger`\n    // Currently `TreeSelect` align the hide popup logic as `Select` which blur to hide.\n    // `documentClickClose` is not accurate anymore. Let's just keep the key word.\n    setOpenState: function setOpenState(open) {\n      var byTrigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var dropdownVisibleChange = this.$props.dropdownVisibleChange;\n\n      if (dropdownVisibleChange && dropdownVisibleChange(open, {\n        documentClickClose: !open && byTrigger\n      }) === false) {\n        return;\n      }\n\n      this.setUncontrolledState({\n        _open: open\n      });\n    },\n    // Tree checkable is also a multiple case\n    isMultiple: function isMultiple() {\n      var _this$$props7 = this.$props,\n          multiple = _this$$props7.multiple,\n          treeCheckable = _this$$props7.treeCheckable;\n      return !!(multiple || treeCheckable);\n    },\n    isLabelInValue: function isLabelInValue() {\n      return _isLabelInValue(this.$props);\n    },\n    // [Legacy] To align with `Select` component,\n    // We use `searchValue` instead of `inputValue`\n    // but currently still need support that.\n    // Add this method the check if is controlled\n    isSearchValueControlled: function isSearchValueControlled() {\n      var props = getOptionProps(this);\n      var inputValue = props.inputValue;\n      if ('searchValue' in props) return true;\n      return 'inputValue' in props && inputValue !== null;\n    },\n    forcePopupAlign: function forcePopupAlign() {\n      var $trigger = this.selectTriggerRef.current;\n\n      if ($trigger) {\n        $trigger.forcePopupAlign();\n      }\n    },\n    delayForcePopupAlign: function delayForcePopupAlign() {\n      var _this5 = this;\n\n      // Wait 2 frame to avoid dom update & dom algin in the same time\n      // https://github.com/ant-design/ant-design/issues/12031\n      requestAnimationFrame(function () {\n        requestAnimationFrame(_this5.forcePopupAlign);\n      });\n    },\n\n    /**\n     * 1. Update state valueList.\n     * 2. Fire `onChange` event to user.\n     */\n    triggerChange: function triggerChange(missValueList, valueList) {\n      var extraInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _this$$data7 = this.$data,\n          valueEntities = _this$$data7._valueEntities,\n          searchValue = _this$$data7._searchValue,\n          prevSelectorValueList = _this$$data7._selectorValueList;\n      var props = getOptionProps(this);\n      var disabled = props.disabled,\n          treeCheckable = props.treeCheckable,\n          treeCheckStrictly = props.treeCheckStrictly;\n      if (disabled) return; // Trigger\n\n      var extra = _extends({\n        // [Legacy] Always return as array contains label & value\n        preValue: prevSelectorValueList.map(function (_ref16) {\n          var label = _ref16.label,\n              value = _ref16.value;\n          return {\n            label: label,\n            value: value\n          };\n        })\n      }, extraInfo); // Format value by `treeCheckStrictly`\n\n\n      var selectorValueList = formatSelectorValue(valueList, props, valueEntities);\n\n      if (!('value' in props)) {\n        var newState = {\n          _missValueList: missValueList,\n          _valueList: valueList,\n          _selectorValueList: selectorValueList\n        };\n\n        if (searchValue && treeCheckable && !treeCheckStrictly) {\n          newState._searchHalfCheckedKeys = getHalfCheckedKeys(valueList, valueEntities);\n        }\n\n        this.setState(newState);\n      } // Only do the logic when `onChange` function provided\n\n\n      if (this.$attrs.onChange) {\n        var connectValueList; // Get value by mode\n\n        if (this.isMultiple()) {\n          connectValueList = [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList));\n        } else {\n          connectValueList = selectorValueList.slice(0, 1);\n        }\n\n        var labelList = null;\n        var returnValue;\n\n        if (this.isLabelInValue()) {\n          returnValue = connectValueList.map(function (_ref17) {\n            var label = _ref17.label,\n                value = _ref17.value;\n            return {\n              label: label,\n              value: value\n            };\n          });\n        } else {\n          labelList = [];\n          returnValue = connectValueList.map(function (_ref18) {\n            var label = _ref18.label,\n                value = _ref18.value;\n            labelList.push(label);\n            return value;\n          });\n        }\n\n        if (!this.isMultiple()) {\n          returnValue = returnValue[0];\n        }\n\n        this.__emit('change', returnValue, labelList, extra);\n      }\n    },\n    focus: function focus() {\n      this.selectorRef.current.focus();\n    },\n    blur: function blur() {\n      this.selectorRef.current.blur();\n    }\n  },\n  // ===================== Render =====================\n  render: function render() {\n    var _this$$data8 = this.$data,\n        valueList = _this$$data8._valueList,\n        missValueList = _this$$data8._missValueList,\n        selectorValueList = _this$$data8._selectorValueList,\n        searchHalfCheckedKeys = _this$$data8._searchHalfCheckedKeys,\n        valueEntities = _this$$data8._valueEntities,\n        keyEntities = _this$$data8._keyEntities,\n        searchValue = _this$$data8._searchValue,\n        open = _this$$data8._open,\n        focused = _this$$data8._focused,\n        treeNodes = _this$$data8._treeNodes,\n        filteredTreeNodes = _this$$data8._filteredTreeNodes;\n    var props = getOptionProps(this);\n    var prefixCls = props.prefixCls,\n        treeExpandedKeys = props.treeExpandedKeys;\n    var isMultiple = this.isMultiple();\n\n    var passProps = _extends(_extends(_extends({}, props), this.$attrs), {\n      isMultiple: isMultiple,\n      valueList: valueList,\n      searchHalfCheckedKeys: searchHalfCheckedKeys,\n      selectorValueList: [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList)),\n      valueEntities: valueEntities,\n      keyEntities: keyEntities,\n      searchValue: searchValue,\n      upperSearchValue: (searchValue || '').toUpperCase(),\n      // Perf save\n      open: open,\n      focused: focused,\n      dropdownPrefixCls: \"\".concat(prefixCls, \"-dropdown\"),\n      ariaId: this.ariaId,\n      onChoiceAnimationLeave: this.onChoiceAnimationLeave,\n      vSlots: this.$slots\n    });\n\n    var popupProps = _extends(_extends({}, passProps), {\n      treeNodes: treeNodes,\n      filteredTreeNodes: filteredTreeNodes,\n      // Tree expanded control\n      treeExpandedKeys: treeExpandedKeys,\n      onTreeExpanded: this.delayForcePopupAlign,\n      ref: this.setPopupRef\n    });\n\n    var $popup = _createVNode(BasePopup, _objectSpread(_objectSpread({}, popupProps), {}, {\n      \"__propsSymbol__\": []\n    }), null);\n\n    var Selector = isMultiple ? MultipleSelector : SingleSelector;\n\n    var $selector = _createVNode(Selector, _objectSpread(_objectSpread({}, passProps), {}, {\n      \"isMultiple\": isMultiple,\n      \"ref\": this.selectorRef\n    }), null);\n\n    var selectTriggerProps = _extends(_extends({}, passProps), {\n      popupElement: $popup,\n      dropdownVisibleChange: this.onDropdownVisibleChange,\n      ref: this.selectTriggerRef\n    });\n\n    return _createVNode(SelectTrigger, selectTriggerProps, {\n      default: function _default() {\n        return [$selector];\n      }\n    });\n  }\n});\nSelect.TreeNode = SelectNode;\nSelect.SHOW_ALL = SHOW_ALL;\nSelect.SHOW_PARENT = SHOW_PARENT;\nSelect.SHOW_CHILD = SHOW_CHILD; // Let warning show correct component name\n\nSelect.name = 'TreeSelect';\nexport default Select;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}