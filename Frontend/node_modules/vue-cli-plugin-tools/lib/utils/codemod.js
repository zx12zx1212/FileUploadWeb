"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.importStatement = exports.addImport = exports.equalsIgnoreSuffix = exports.styleLang = exports.styleFile = void 0;
const options_1 = require("../options");
const styleFile = ({ libraryName, style } = options_1.CODE_MOD_OPTIONS) => {
    let result;
    if (style && typeof style === 'string') {
        result = `${libraryName}/dist/${style}.less`;
    }
    else if (style && typeof style === 'object') {
        const { dir, name, suffix } = style;
        result = `${libraryName}/${dir}/${name}.${suffix}`;
    }
    else {
        result = '';
    }
    return result;
};
exports.styleFile = styleFile;
const styleLang = (opts) => {
    const { style } = opts;
    if (typeof style === 'object' && style.suffix === 'css') {
        return 'css';
    }
    return true;
};
exports.styleLang = styleLang;
const removeSuffix = (file) => file.substring(0, file.lastIndexOf('.'));
const equalsIgnoreSuffix = (s1, s2) => {
    return removeSuffix(s1) === removeSuffix(s2);
};
exports.equalsIgnoreSuffix = equalsIgnoreSuffix;
const importAstHash = (node) => JSON.stringify({
    specifiers: node.specifiers.map((kind) => kind.local.name),
    source: node.source.value,
});
const addImport = (root, api, imports) => {
    const importedDeclarations = root.find(api.j.ImportDeclaration);
    const importedAstHash = new Set(importedDeclarations.nodes().map(importAstHash));
    const toImport = Array.isArray(imports) ? imports : [imports];
    const nonDuplicates = (node) => !importedAstHash.has(importAstHash(node));
    const importAstNodes = toImport
        .map((txt) => api.j(`${txt}\n`).nodes()[0].program.body[0])
        .filter(nonDuplicates);
    if (importedDeclarations.length) {
        importedDeclarations
            .at(-1)
            .forEach(({ node }) => delete node.loc)
            .insertAfter(importAstNodes);
    }
    else {
        root.get().node.program.body.unshift(...importAstNodes);
    }
};
exports.addImport = addImport;
const importStatement = (style, opts = options_1.CODE_MOD_OPTIONS) => {
    if (style) {
        return `import '${styleFile(opts)}';`;
    }
    const { defaultImport, importName, libraryName } = opts;
    const actualName = defaultImport ? importName : `{ ${importName} }`;
    return `import ${actualName} from '${libraryName}';`;
};
exports.importStatement = importStatement;
