"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteDir = exports.deleteFile = exports.renameTpl = exports.GIT_KEEP = void 0;
const fs_1 = __importDefault(require("fs"));
exports.GIT_KEEP = /.gitkeep$/;
const isExclude = (file, exclude) => {
    if (exclude) {
        const excludes = Array.isArray(exclude) ? exclude : [exclude];
        return excludes.some((ignore) => ignore.test(file));
    }
    return false;
};
const renameTpl = (file, suffix, opts = { original: 'ejs', exclude: exports.GIT_KEEP }) => {
    const { original, exclude } = opts;
    if (fs_1.default.existsSync(file) && fs_1.default.statSync(file).isFile() && !isExclude(file, exclude)) {
        fs_1.default.renameSync(file, file.replace(new RegExp(`${original}$`), suffix));
    }
};
exports.renameTpl = renameTpl;
const deleteFile = (file, exclude = exports.GIT_KEEP) => {
    if (fs_1.default.existsSync(file) && fs_1.default.statSync(file).isFile() && !isExclude(file, exclude)) {
        fs_1.default.unlinkSync(file);
    }
};
exports.deleteFile = deleteFile;
const deleteDir = (file, exclude) => {
    if (fs_1.default.existsSync(file) && fs_1.default.statSync(file).isDirectory()) {
        const files = fs_1.default.readdirSync(file);
        files.forEach((path) => {
            const curPath = `${file}/${path}`;
            if (fs_1.default.statSync(curPath).isDirectory()) {
                deleteDir(curPath, exclude);
            }
            else {
                deleteFile(curPath, exclude);
            }
        });
        try {
            fs_1.default.rmdirSync(file);
        }
        catch (e) { }
    }
};
exports.deleteDir = deleteDir;
