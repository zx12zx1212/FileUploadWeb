"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function save(root, exist, api, opts) {
    if (!exist) {
        const { importName } = opts;
        const identifier = api.j.Identifier;
        const memberExpression = api.j.MemberExpression;
        const appRoots = root.find(api.j.CallExpression, (ast) => {
            if (identifier.check(ast.callee) && ast.callee.name === 'createApp') {
                return true;
            }
            return (memberExpression.check(ast.callee) &&
                identifier.check(ast.callee.object) &&
                ast.callee.object.name === 'Vue' &&
                identifier.check(ast.callee.property) &&
                ast.callee.property.name === 'createApp');
        });
        appRoots.replaceWith(({ node: createAppCall }) => {
            return api.j.callExpression(api.j.memberExpression(createAppCall, api.j.identifier('use')), [
                api.j.identifier(importName),
            ]);
        });
    }
}
exports.default = (root, api, opts) => {
    const { importName, remove } = opts;
    const memberExpression = api.j.MemberExpression;
    const identifier = api.j.Identifier;
    const used = root.find(api.j.CallExpression, (ast) => {
        return (memberExpression.check(ast.callee) &&
            identifier.check(ast.callee.property) &&
            ast.callee.property.name === 'use' &&
            identifier.check(ast.arguments[0]) &&
            importName === ast.arguments[0].name);
    });
    if (remove) {
        used.replaceWith((ast) => {
            return ast.node.callee.object;
        });
    }
    else {
        save(root, used.length > 0, api, opts);
    }
};
